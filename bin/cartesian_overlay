#!/usr/bin/env python

usage = "cartesian_overlay [--options] good_ensemble.txt bad_ensemble.txt"
description = "generate representations of the ensemble of points produced by localize"
author = "Reed Essick"

#-------------------------------------------------

import os
import sys

import numpy as np

import emcee ### for autocorrelation analysis

import simUtils as utils
import freqDepAntennas as ant

import matplotlib
matplotlib.use('Agg')
from matplotlib import cm
from matplotlib import pyplot as plt
plt.rcParams.update({
    'text.usetex':True,
    'font.family': 'serif',
#    'font.serif': ['Computer Modern'],
#    "axes.grid": True,
#    "axes.axisbelow": False,
#    "axes.formatter.limits": (-3, 4),
    "axes.labelsize": 25,
    "axes.titlesize": 25,
    "figure.subplot.bottom": 0.14,
    "figure.subplot.left": 0.14,
    "figure.subplot.right": 0.93,
    "figure.subplot.top": 0.95,
    "grid.color": 'gray',
#    "image.aspect": 'auto',
#    "image.interpolation": 'nearest',
#    "image.origin": 'lower',
    "xtick.labelsize": 25,
    "ytick.labelsize": 25,
})

import corner

from optparse import OptionParser

#-------------------------------------------------

deg2rad = np.pi/180
rad2deg = 1./deg2rad

#-------------------------------------------------

parser = OptionParser(usage=usage, description=description)

parser.add_option('-v', '--verbose', default=False, action='store_true')
parser.add_option('-V', '--Verbose', default=False, action='store_true')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

### limits on what data to plot
parser.add_option('', '--min-sample', default=0, type='int',
    help='discard all samples that have indecies less than --min-sample. DEFAULT=0')

parser.add_option('', '--sample-spacing', default=1, type='int',
    help='only retain 1 in every --sample-spacing points. DEFAULT=1')

### reference parameters

parser.add_option('', '--theta', default=None, type='float',
    help='the injected parameter. Will be annotated on plots')
parser.add_option('', '--phi', default=None, type='float',
    help='the injected parameter. Will be annotated on plots')
parser.add_option('', '--psi', default=None, type='float',
    help='the injected parameter. Will be annotated on plots')
parser.add_option('', '--iota', default=None, type='float',
    help='the injected parameter. Will be annotated on plots')
parser.add_option('', '--distanceMpc', default=None, type='float',
    help='the injected parameter. Will be annotated on plots')
parser.add_option('', '--timeAtCoalescence', default=None, type='float',
    help='the injected parameter. Will be annotated on plots')

parser.add_option('', '--args-are-degrees', default=False, action='store_true')

### line-of-sight plots to make
parser.add_option('', '--line-of-sight', nargs=2, default=[], type='string', action='append',
    help='generate skymap scatters in this line of sight as well. \
Also, add dT marginal to corner plot. (eg: H L)')

### plotting options
parser.add_option('', '--color', default='k', type='string',
    help='color used for annotation in skymap scatter and truth annotations in corner')
parser.add_option('', '--alpha', default=1.0, type='float',
    help='alpha used for annotation in skymap scatter')

parser.add_option('', '--scatter-alpha', default=0.1, type='float',
    help='alpha used for markers in skymap scatter')

parser.add_option('', '--color-map1', default="OrRd", type='string',
    help='used to color points in skymap scatter plot')
parser.add_option('', '--color-map2', default="GnBu", type='string',
    help='used to color points in skymap scatter plot')
parser.add_option('', '--colorbar', default=False, action='store_true',
    help='include colobars')

parser.add_option('', '--min-lnprob', default=None, type='float',
    help='the minimum lnprob plotted in skymap scatter')
parser.add_option('', '--max-lnprob', default=None, type='float',
    help='the maximum lnprob plotted in skymap scatter')

parser.add_option('', '--linear-prob', default=False, action='store_true',
    help='use linear probability instead of lnprob')

parser.add_option('', '--scatter-markersize', default=1, type='float',
    help='the markersize for skymap scatter plot')

parser.add_option('', '--min-theta', default=None, type='float',
    help='plotting bounds. The same numerical value is applied to all frames of reference.')
parser.add_option('', '--max-theta', default=None, type='float',
    help='plotting bounds. The same numerical value is applied to all frames of reference.')

parser.add_option('', '--min-phi', default=None, type='float',
    help='plotting bounds. The same numerical value is applied to all frames of reference.')
parser.add_option('', '--max-phi', default=None, type='float',
    help='plotting bounds. The same numerical value is applied to all frames of reference.')

###
parser.add_option('', '--quiver', default=False, action='store_true')

parser.add_option('', '--N-theta', default=5, type='int')
parser.add_option('', '--N-phi', default=5, type='int')

parser.add_option('', '--fmax', default=128, type='float')
parser.add_option('', '--deltaf', default=1., type='float')

parser.add_option('-i', '--instrument', default=[], type='string', action='append')
parser.add_option('', '--max-dang', default=np.infty, type='float',
    help='maximum angle we use for coloration in quiver plot. specified in degrees. DEFAULT=infty')

parser.add_option('', '--arrow-scaling', default=1.0, type='float')
parser.add_option('', '--arrow-alpha', default=0.25, type='float')

opts, args = parser.parse_args()

assert len(args)==2, 'please supply exactly 2 input argument\n%s'%usage

opts.verbose = opts.verbose or opts.Verbose

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

if opts.args_are_degrees:
    if opts.theta!=None: 
        opts.theta *= deg2rad
    if opts.phi!=None: 
        opts.phi *= deg2rad
    if opts.psi!=None: 
        opts.psi *= deg2rad
    if opts.iota!=None: 
        opts.iota *= deg2rad

else:
    if opts.min_theta!=None:
        opts.min_theta *= rad2deg
    if opts.max_theta!=None:
        opts.max_theta *= rad2deg
    if opts.min_phi!=None:
        opts.min_phi *= rad2deg
    if opts.max_phi!=None:
        opts.max_phi *= rad2deg

if opts.phi > np.pi:
    opts.phi -= 2*np.pi

if opts.min_phi > 180:
    opts.min_phi -= 360
if opts.max_phi > 180:
    opts.max_phi -= 360

if opts.linear_prob:
    if opts.max_lnprob!=None:
        opts.max_lnprob = np.exp(opts.max_lnprob)
    if opts.min_lnprob!=None:
        opts.min_lnprob = np.exp(opts.min_lnprob)

#-------------------------------------------------

if opts.verbose:
    print( 'reading ensemble of samples from : '+args[0] )
samples1 = utils.load_ensemble( args[0], min_sample=opts.min_sample, spacing=opts.sample_spacing )
samples1['phi'][samples1['phi']>np.pi] -= 2*np.pi ### shift phi to match plotting range

if opts.verbose:
    print( 'reading ensemble of samples from : '+args[1] )
samples2 = utils.load_ensemble( args[1], min_sample=opts.min_sample, spacing=opts.sample_spacing )
samples2['phi'][samples2['phi']>np.pi] -= 2*np.pi

# columns are :
#   k (walker number)
#   lnprob
#   theta
#   phi
#   psi
#   iota
#   distanceMpc
#   timeAtCoalescence

#-------------------------------------------------

if opts.verbose:
    print( '(scatter) plot skymap on cartesian projection' )

if opts.linear_prob:
    samples1['lnprob'] -= utils.sumLogs(samples1['lnprob'])
    samples1['lnprob'] = np.exp(samples1['lnprob'])

    samples2['lnprob'] -= utils.sumLogs(samples2['lnprob'])
    samples2['lnprob'] = np.exp(samples2['lnprob'])

### color points by their lnprob
vmin=opts.min_lnprob if opts.min_lnprob!=None else min(np.min(samples1['lnprob'][samples1['lnprob']>-np.infty]), np.min(samples2['lnprob'][samples2['lnprob']>-np.infty]))
vmax=opts.max_lnprob if opts.max_lnprob!=None else max(np.max(samples1['lnprob'][samples1['lnprob']<np.infty]),  np.max(samples2['lnprob'][samples2['lnprob']<np.infty]))

mappable1 = cm.ScalarMappable(
    norm=plt.Normalize(
        vmin=vmin,
        vmax=vmax,
    ),
    cmap=plt.get_cmap(opts.color_map1),
)
mappable1.set_array(samples1['lnprob'])
order1 = samples1['lnprob'].argsort() ### smallest to largest
color1 = mappable1.to_rgba(samples1['lnprob'][order1])

truth1 = samples1['lnprob'][order1]>vmin

mappable2 = cm.ScalarMappable(
    norm=plt.Normalize(
        vmin=vmin,
        vmax=vmax,
    ),
    cmap=plt.get_cmap(opts.color_map2),
)
mappable2.set_array(samples2['lnprob'])
order2 = samples2['lnprob'].argsort() ### smallest to largest
color2 = mappable2.to_rgba(samples2['lnprob'][order2])

truth2 = samples2['lnprob'][order2]>vmin

c1 = mappable1.to_rgba(vmax)
c2 = mappable2.to_rgba(vmax)

### set up quiver
if opts.quiver:
    detectors = [utils.known_detectors[_] for _ in opts.instrument]
    assert len(detectors)==2

    ### iterate over source locations
    theta_inj = np.linspace(opts.min_theta, opts.max_theta, opts.N_theta)*deg2rad

    phi_inj = np.linspace(opts.min_phi, opts.max_phi, opts.N_phi)*deg2rad
    phi_inj[phi_inj>np.pi] -= 2*np.pi ### needed for plotting, should not affect anything else

    theta_inj, phi_inj = np.meshgrid(theta_inj, phi_inj)

    theta_inj = theta_inj.flatten()
    phi_inj = phi_inj.flatten()

    npix = len(theta_inj)

    dts = np.empty((npix, len(detectors)), dtype=float)

    ### for now, hard-code inclination and polarization angle. 
    ### FIXME: may want to marginalize over this at some point...
    iota = 0
    cosiota = np.cos(iota)
    plus = 0.5*(1+cosiota**2)
    cros = 1j*cosiota

    psi = 0

    ### also hard-code frequencies
    ### FIXME: may want to allow the maximum frequency to be user-specified at some point
    freqs = np.arange(0, opts.fmax, opts.deltaf)

    for ind in xrange(npix):

        if opts.Verbose:
            sys.stdout.write('\r%d / %d'%(ind+1, npix))
            sys.stdout.flush()

        for jnd, detector in enumerate(detectors):
            Fp, Fx = ant.antenna_response(theta_inj[ind], phi_inj[ind], psi, detector.ex, detector.ey, T=detector.T, freqs=freqs)
            Fp0, Fx0 = ant.const_antenna_response(theta_inj[ind], phi_inj[ind], psi, detector.ex, detector.ey)

            x = (plus*Fp.flatten() + cros*Fx.flatten())/(plus*Fp0+cros*Fx0)
            phs = np.arctan2(x.imag, x.real)

            dt = np.polyfit(2*np.pi*freqs, phs, deg=1)[0] ### extract the slope of a linear relationship between phase and freqs
                                          ### this corresponds to the time-of-arrival offset
            dts[ind,jnd] = dt
    if opts.Verbose:
        sys.stdout.write('\n')


### iterate over line-of-sight frames
for tag, pole in [('', None)] + [('-'+''.join(los), utils.IFOs2pole(*los)) for los in opts.line_of_sight]:

    if opts.verbose:
        print "\n--- %s ---\n"%tag

    fig = plt.figure()
    ax = fig.gca()

    theta1, phi1 = utils.ThetaPhi2LineOfSight( samples1['theta'][order1], samples1['phi'][order1], pole=pole )

    ax.scatter(
        rad2deg*phi1[truth1], 
        90 - rad2deg*theta1[truth1], ### plot declination, not theta
        color=color1[truth1],
        alpha=opts.scatter_alpha,
        marker='o', 
        s=opts.scatter_markersize,
    )

    if opts.colorbar:
        cb1 = plt.colorbar(mappable1, orientation='vertical', shrink=0.8, pad=0.05)
        if opts.linear_prob:
            cb1.set_label('$p(\\vec{\\theta}|\mathrm{data},\mathrm{good})$')
        else:
            cb1.set_label('$\ln p(\\vec{\\theta}|\mathrm{data},\mathrm{good})$')

    theta2, phi2 = utils.ThetaPhi2LineOfSight( samples2['theta'][order2], samples2['phi'][order2], pole=pole )

    ax.scatter(
        rad2deg*phi2[truth2], 
        90 - rad2deg*theta2[truth2], ### plot declination, not theta
        color=color2[truth2],
        alpha=opts.scatter_alpha,
        marker='o', 
        s=opts.scatter_markersize,
    )

    if opts.colorbar:
        cb2 = plt.colorbar(mappable2, orientation='vetrical', shrink=0.8, pad=0.05)
        if opts.linear_prob:
            cb2.set_label('$p(\\vec{\\theta}|\mathrm{data},\mathrm{bad})$')
        else:
            cb2.set_label('$\ln p(\\vec{\\theta}|\mathrm{data},\mathrm{bad})$')

    #---

    ax.set_xlabel('$\phi$')
    ax.set_ylabel('$\delta$')

    ax.grid(True, which='both')
    if (opts.phi!=None) and (opts.theta!=None):
        thetaINJ, phiINJ = utils.ThetaPhi2LineOfSight( opts.theta, opts.phi, pole=pole )
        ax.plot(rad2deg*phiINJ, 90-rad2deg*thetaINJ, marker='x', markersize=20, markeredgewidth=2, color=opts.color, alpha=opts.alpha )

    if opts.min_theta!=None:
        ax.set_ylim(ymax=90-opts.min_theta)
    if opts.max_theta!=None:
        ax.set_ylim(ymin=90-opts.max_theta)
    ymin, ymax = ax.get_ylim()
    ax.set_ylim(ymin=max(ymin, -90), ymax=min(ymax, 90))

    if opts.min_phi!=None:
        ax.set_xlim(xmin=opts.min_phi)
    if opts.max_phi!=None:
        ax.set_xlim(xmax=opts.max_phi)
    xmin, xmax = ax.get_xlim()
    ax.set_xlim(xmin=max(xmin, -180), xmax=min(xmax, 180))

    ax.set_xticklabels(['$%.1f^\circ$'%tick for tick in ax.get_xticks()])
    ax.set_yticklabels(['$%.1f^\circ$'%tick for tick in ax.get_yticks()])

    figname = "%s/cartesian_overlay-skymap%s%s.png"%(opts.output_dir, tag, opts.tag)
    if opts.verbose:
        print( '    saving : '+figname )
    fig.savefig(figname)

    #---------------------------------------------
    if opts.quiver:
        if opts.verbose:
            print( 'generating quiver of biases on a pair-wise detector basis' )

        det1, det2 = detectors
        jnd1 = jnd2 = 0

        pole, maxDT = utils.IFOs2pole( det1.name, det2.name, return_maxDT=True )
        theta_los, phi_los = utils.ThetaPhi2LineOfSight(theta_inj, phi_inj, pole=pole)

        new_costheta = np.cos(theta_los) - (dts[:,jnd1]-dts[:,jnd1+1+jnd2])/maxDT
        new_costheta[new_costheta>1] = 1   ### constraints based on range of cos(theta)
        new_costheta[new_costheta<-1] = -1

        theta_rec, phi_rec = utils.lineOfSight2ThetaPhi(np.arccos(new_costheta), phi_los, pole=pole)

        data = []
        for ind in xrange(npix):
            d_inj = 0.5*np.pi-theta_inj[ind]
            p_inj = phi_inj[ind]

            d_rec = 0.5*np.pi-theta_rec[ind]
            p_rec = phi_rec[ind]

            dp = (p_rec-p_inj)%(2*np.pi)
            if np.abs(dp) > np.pi:
                dp = (p_inj-p_rec)%(2*np.pi)
            dd = (d_rec-d_inj)

            data.append( (dp, dd, ((np.cos(d_inj)*dp)**2+dd**2)**0.5) )

        data = np.array(data)

        ### arrows
#        mappable = cm.ScalarMappable(
#            norm=plt.Normalize(
#                vmin=np.min(data[:,2])*rad2deg,
#                vmax=min(np.max(data[:,2])*rad2deg, opts.max_dang),
#            ),
#            cmap=plt.get_cmap(opts.color_map),
#        )
#        mappable.set_array(data[:,2]*rad2deg)

        for ind in data[:,2].argsort()[::-1]:
            d_inj = (0.5*np.pi-theta_inj[ind])*rad2deg
            p_inj = phi_inj[ind]*rad2deg

            dp, dd, norm = data[ind]*rad2deg
            f = 1./3
            F = 0.75
#            color = mappable.to_rgba(norm)
            color = 'k'

            ax.arrow(
                p_inj,
                d_inj,
                opts.arrow_scaling*dp*(1-f),
                opts.arrow_scaling*dd*(1-f),
                head_width=opts.arrow_scaling*F*f*norm,
                head_length=opts.arrow_scaling*f*norm,
                fc=color,
                ec=color,
                alpha=opts.arrow_alpha,
            )

        figname = "%s/cartesian_overlay-skymap-%s-%s%s%s.png"%(opts.output_dir, det1.name, det2.name, tag, opts.tag)
        if opts.verbose:
            print( '    saving : '+figname )
        fig.savefig(figname)

    plt.close(figname)

    ### overlay marginals
    fig = plt.figure()
    axt = plt.subplot(2,1,1)
    axp = plt.subplot(2,1,2)

    Nbins=50

    ### only keep the samples with large enough lnprob
    theta1 = theta1[truth1]
    phi1 = phi1[truth1]

    theta2 = theta2[truth2]
    phi2 = phi2[truth2]

    bins = np.linspace(
        opts.min_theta if opts.min_theta!=None else 0,
        opts.max_theta if opts.max_theta!=None else 180,
        Nbins+1,
    )
    for theta, c in [(theta1, c1), (theta2, c2)]:
        try:
            axt.hist(rad2deg*theta, bins=bins, histtype='step', weights=np.ones_like(theta, dtype=float)/len(theta), color=c)
        except ValueError:
            pass ### thrown when there are no samples within bins

    ### KL divergence
    t1 = np.histogram(rad2deg*theta1, bins=bins, weights=np.ones_like(theta1, dtype=float)/len(theta1))[0]
    t2 = np.histogram(rad2deg*theta2, bins=bins, weights=np.ones_like(theta2, dtype=float)/len(theta2))[0]
    print "Theta:"
    print "  H(1) = %.6e"%(-np.sum(t1[t1>0] * np.log(t1[t1>0])))
    print "  H(2) = %.6e"%(-np.sum(t2[t2>0] * np.log(t2[t2>0])))
    print "  KL(1->2) = %.6e"%(np.sum(t1[t1>0] * np.log(t1[t1>0]/t2[t1>0])))
    print "  KL(2->1) = %.6e"%(np.sum(t2[t2>0] * np.log(t2[t2>0]/t1[t2>0])))
    print "  F = %.6f"%(np.sum((t1*t2)**0.5))

    bins = np.linspace(
        opts.min_phi if opts.min_phi!=None else -180,
        opts.max_phi if opts.max_phi!=None else +180,
        Nbins+1,
    )
    for phi, c in [(phi1, c1), (phi2, c2)]:
        try:
            axp.hist(rad2deg*phi, bins=bins, histtype='step', weights=np.ones_like(phi, dtype=float)/len(phi), color=c)
        except ValueError:
            pass ### thrown when there are no samples within bins

    ### KL divergence
    p1 = np.histogram(rad2deg*phi1, bins=bins, weights=np.ones_like(phi1, dtype=float)/len(phi1))[0]
    p2 = np.histogram(rad2deg*phi2, bins=bins, weights=np.ones_like(phi2, dtype=float)/len(phi2))[0]
    print "Phi:"
    print "  H(1) = %.6e"%(-np.sum(p1[p1>0] * np.log(p1[p1>0])))
    print "  H(2) = %.6e"%(-np.sum(p2[p2>0] * np.log(p2[p2>0])))
    print "  KL(1->2) = %.6e"%(np.sum(p1[p1>0] * np.log(p1[p1>0]/p2[p1>0])))
    print "  KL(2->1) = %.6e"%(np.sum(p2[p2>0] * np.log(p2[p2>0]/p1[p2>0])))
    print "  F = %.6f"%(np.sum((p1*p2)**0.5))

    axt.set_xlabel('$\\theta$')
    axt.set_ylabel('fraction of samples')

    axp.set_xlabel('$\phi$')
    axp.set_ylabel('fraction of samples')

    if opts.min_theta!=None:
        axt.set_xlim(xmin=opts.min_theta)
    if opts.max_theta!=None:
        axt.set_xlim(xmax=opts.max_theta)

    if opts.min_phi!=None:
        axp.set_xlim(xmin=opts.min_phi)
    if opts.max_phi!=None:
        axp.set_xlim(xmax=opts.max_phi)

    for ax in [axt, axp]:
        ax.grid(True, which='both')
        ax.set_xticklabels(['$%.1f^\circ$'%tick for tick in ax.get_xticks()])

    if (opts.theta!=None) and (opts.phi!=None):
        ylim = axt.get_ylim()
        axt.plot([rad2deg*thetaINJ]*2, ylim, 'k-')
        axt.set_ylim(ylim)

        ylim = axp.get_ylim()
        axp.plot([rad2deg*phiINJ]*2, ylim, 'k-')
        axp.set_ylim(ylim)

    figname = "%s/cartesian_overlay-skymap-marginals%s%s.png"%(opts.output_dir, tag, opts.tag)
    if opts.verbose:
        print( '    saving : '+figname )
    fig.savefig(figname)
    plt.close(fig)

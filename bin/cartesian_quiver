#!/usr/bin/env python

usage = "cartesian_quiver [--options]"
description = "produce quiver plots showing how the bias behaves as a function of source location"
author = "Reed Essick"

#-------------------------------------------------

import os
import sys

import simUtils as utils
import freqDepAntennas as ant

import numpy as np
import healpy as hp

import matplotlib
matplotlib.use('Agg')
from matplotlib import cm
from matplotlib import colors
from matplotlib import pyplot as plt
plt.rcParams.update({
    'text.usetex':True,
    'font.family': 'serif',
#    'font.serif': ['Computer Modern'],
#    "axes.grid": True,
#    "axes.axisbelow": False,
#    "axes.formatter.limits": (-3, 4),
    "axes.labelsize": 14,
    "axes.titlesize": 14,
    "figure.subplot.bottom": 0.10,
    "figure.subplot.left": 0.13,
    "figure.subplot.right": 0.95,
    "figure.subplot.top": 0.95,
    "grid.color": 'gray',
#    "image.aspect": 'auto',
#    "image.interpolation": 'nearest',
#    "image.origin": 'lower',
    "xtick.labelsize": 15,
    "ytick.labelsize": 15,
})

from lalinference import plot as lalinf_plot

from optparse import OptionParser

#-------------------------------------------------

axpos = [0.07, 0.05, 0.92, 0.90]

rad2deg = 180/np.pi
deg2rad = 1./rad2deg

#-------------------------------------------------

parser = OptionParser(usage=usage, description=description)

parser.add_option('-v', '--verbose', default=False, action='store_true')
parser.add_option('-V', '--Verbose', default=False, action='store_true')

parser.add_option('', '--fmax', default=128, type='float')
parser.add_option('', '--deltaf', default=1., type='float')

parser.add_option('-i', '--instrument', default=[], type='string', action='append')

parser.add_option('', '--color-map', default='OrRd', type='string')

parser.add_option('', '--max-dang', default=np.infty, type='float',
    help='maximum angle we use for coloration in quiver plot. specified in degrees. DEFAULT=infty')
parser.add_option('', '--no-quiver-colorbar', default=False, action='store_true')

parser.add_option('', '--arrow-scaling', default=1.0, type='float')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

parser.add_option('', '--N-theta', default=10, type='int')
parser.add_option('', '--min-theta', default=None, type='float',
    help='plotting bounds. The same numerical value is applied to all frames of reference.')
parser.add_option('', '--max-theta', default=None, type='float',
    help='plotting bounds. The same numerical value is applied to all frames of reference.')

parser.add_option('', '--N-phi', default=10, type='int')
parser.add_option('', '--min-phi', default=None, type='float',
    help='plotting bounds. The same numerical value is applied to all frames of reference.')
parser.add_option('', '--max-phi', default=None, type='float',
    help='plotting bounds. The same numerical value is applied to all frames of reference.')

parser.add_option('', '--args-are-degrees', default=False, action='store_true')

opts, args = parser.parse_args()

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

opts.verbose = opts.verbose or opts.Verbose

if opts.args_are_degrees:
    pass

else:
    if opts.min_theta!=None:
        opts.min_theta *= rad2deg
    else:
        opts.min_theta = 0
    if opts.max_theta!=None:
        opts.max_theta *= rad2deg
    else:
        opts.max_theta = 180
    if opts.min_phi!=None:
        opts.min_phi *= rad2deg
    else:
        opts.min_phi = -180
    if opts.max_phi!=None:
        opts.max_phi *= rad2deg
    else:
        opts.max_phi = 180

if opts.min_phi > 180:
    opts.min_phi -= 360
if opts.max_phi > 180:
    opts.max_phi -= 360

#-------------------------------------------------

if opts.verbose:
    print( 'setting up detectors' )
### set up detectors
detectors = [utils.known_detectors[_] for _ in opts.instrument]

if opts.verbose:
    print( 'computing shifts in time-of-arrival at each IFO from antenna responses\' phase' )
### iterate over source locations
theta_inj = np.linspace(opts.min_theta, opts.max_theta, opts.N_theta)*deg2rad

phi_inj = np.linspace(opts.min_phi, opts.max_phi, opts.N_phi)*deg2rad
phi_inj[phi_inj>np.pi] -= 2*np.pi ### needed for plotting, should not affect anything else

theta_inj, phi_inj = np.meshgrid(theta_inj, phi_inj)

theta_inj = theta_inj.flatten()
phi_inj = phi_inj.flatten()

npix = len(theta_inj)

dts = np.empty((npix, len(detectors)), dtype=float)

### for now, hard-code inclination and polarization angle. 
### FIXME: may want to marginalize over this at some point...
iota = 0
cosiota = np.cos(iota)
plus = 0.5*(1+cosiota**2)
cros = 1j*cosiota

psi = 0

### also hard-code frequencies
### FIXME: may want to allow the maximum frequency to be user-specified at some point
freqs = np.arange(0, opts.fmax, opts.deltaf)

for ind in xrange(npix):

    if opts.Verbose:
        sys.stdout.write('\r%d / %d'%(ind+1, npix))
        sys.stdout.flush()

    for jnd, detector in enumerate(detectors):
        Fp, Fx = ant.antenna_response(theta_inj[ind], phi_inj[ind], psi, detector.ex, detector.ey, T=detector.T, freqs=freqs)
        Fp0, Fx0 = ant.const_antenna_response(theta_inj[ind], phi_inj[ind], psi, detector.ex, detector.ey)

        x = (plus*Fp.flatten() + cros*Fx.flatten())/(plus*Fp0+cros*Fx0)
        phs = np.arctan2(x.imag, x.real)

        dt = np.polyfit(2*np.pi*freqs, phs, deg=1)[0] ### extract the slope of a linear relationship between phase and freqs
                                          ### this corresponds to the time-of-arrival offset
        dts[ind,jnd] = dt
if opts.Verbose:
    sys.stdout.write('\n')

#------------------------

if opts.verbose:
    print( 'generating quiver of biases on a pair-wise detector basis' )

for jnd1, det1 in enumerate(detectors[:-1]):
    for jnd2, det2 in enumerate(detectors[jnd1+1:]):

        pole, maxDT = utils.IFOs2pole( det1.name, det2.name, return_maxDT=True )
        theta_los, phi_los = utils.ThetaPhi2LineOfSight(theta_inj, phi_inj, pole=pole)

        new_costheta = np.cos(theta_los) - (dts[:,jnd1]-dts[:,jnd1+1+jnd2])/maxDT
        new_costheta[new_costheta>1] = 1   ### constraints based on range of cos(theta)
        new_costheta[new_costheta<-1] = -1

        theta_rec, phi_rec = utils.lineOfSight2ThetaPhi(np.arccos(new_costheta), phi_los, pole=pole)

        data = []
        for ind in xrange(npix):
            d_inj = 0.5*np.pi-theta_inj[ind]
            p_inj = phi_inj[ind]

            d_rec = 0.5*np.pi-theta_rec[ind]
            p_rec = phi_rec[ind]

            dp = (p_rec-p_inj)%(2*np.pi)
            if np.abs(dp) > np.pi:
                dp = (p_inj-p_rec)%(2*np.pi)
            dd = (d_rec-d_inj)
            
            data.append( (dp, dd, ((np.cos(d_inj)*dp)**2+dd**2)**0.5) )

        data = np.array(data)

        ### arrows
        mappable = cm.ScalarMappable(
            norm=plt.Normalize(
#            norm=colors.LogNorm(
                vmin=np.min(data[:,2])*rad2deg,
                vmax=min(np.max(data[:,2])*rad2deg, opts.max_dang),
            ),
            cmap=plt.get_cmap(opts.color_map),
        )
        mappable.set_array(data[:,2]*rad2deg)

        fig = plt.figure()
        ax = fig.gca()

#        for ind in xrange(npix):
        for ind in data[:,2].argsort()[::-1]:
            d_inj = (0.5*np.pi-theta_inj[ind])*rad2deg
            p_inj = phi_inj[ind]*rad2deg

            dp, dd, norm = data[ind]*rad2deg
            f = 1./2
            F = 0.75
            color = mappable.to_rgba(norm)

            ax.arrow(
                p_inj,
                d_inj, 
                opts.arrow_scaling*dp*(1-f), 
                opts.arrow_scaling*dd*(1-f), 
                head_width=opts.arrow_scaling*F*f*norm, 
                head_length=opts.arrow_scaling*f*norm, 
                fc=color, 
                ec=color,
            )
#            ax.arrow(
#                p_inj-360,
#                d_inj, 
#                opts.arrow_scaling*dp*(1-f), 
#                opts.arrow_scaling*dd*(1-f), 
#                head_width=opts.arrow_scaling*F*f*norm, 
#                head_length=opts.arrow_scaling*f*norm, 
#                fc=color, 
#                ec=color,
#            )
#            ax.arrow(
#                p_inj+360,
#                d_inj, 
#                opts.arrow_scaling*dp*(1-f), 
#                opts.arrow_scaling*dd*(1-f), 
#                head_width=opts.arrow_scaling*F*f*norm, 
#                head_length=opts.arrow_scaling*f*norm, 
#                fc=color, 
#                ec=color,
#            )

        ax.set_title('%s and %s'%(det1.name, det2.name))

        ax.grid(True, which='both')

        if not opts.no_quiver_colorbar:
            cb = plt.colorbar(mappable, orientation='vertical', shrink=0.8, pad=0.05)
            cb.set_label('$|\delta \\vec{\\theta}|$ [$^\circ$]')

        ax.set_xlim(xmin=opts.min_phi, xmax=opts.max_phi)
        ax.set_ylim(ymin=90-opts.max_theta, ymax=90-opts.min_theta)

        ax.set_ylabel('$\delta$')
        ax.set_xlabel('$\phi$')

        ax.set_yticklabels(['$%.1f^\circ$'%tick for tick in ax.get_yticks()])
        ax.set_xticklabels(['$%.1f^\circ$'%tick for tick in ax.get_xticks()])

        ### save
        figname = "%s/cartesian_quiver-skymap-%s-%s%s.png"%(opts.output_dir, det1.name, det2.name, opts.tag)
        if opts.verbose:
            print( '    saving : '+figname )
        fig.savefig(figname)
        plt.close(fig)

#!/usr/bin/env python

usage = "plot_antennas [--options]"
description = "make some plots of the antenna patterns for a single IFO"
author = "Reed Essick"

#-------------------------------------------------

import os

import freqDepAntennas as ant

import numpy as np
import healpy as hp

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt
plt.rcParams.update({
    'text.usetex':True,
    'font.family': 'serif',
#    'font.serif': ['Computer Modern'],
#    "axes.grid": True,
#    "axes.axisbelow": False,
#    "axes.formatter.limits": (-3, 4),
    "axes.labelsize": 20,
    "axes.titlesize": 22,
    "figure.subplot.bottom": 0.13,
    "figure.subplot.left": 0.20,
    "figure.subplot.right": 0.85,
    "figure.subplot.top": 0.95,
    "grid.color": 'gray',
#    "image.aspect": 'auto',
#    "image.interpolation": 'nearest',
#    "image.origin": 'lower',
    "xtick.labelsize": 15,
    "ytick.labelsize": 15,
})

from lalinference import plot as lalinf_plot

from optparse import OptionParser

#-------------------------------------------------

axpos = [0.07, 0.05, 0.92, 0.90]

rad2deg = 180/np.pi

def phs( x ):
    return np.arctan2(x.imag, x.real)

#-------------------------------------------------

parser = OptionParser(usage=usage, description=description)

parser.add_option('-v', '--verbose', default=False, action='store_true')
parser.add_option('-V', '--Verbose', default=False, action='store_true')

parser.add_option('-n', '--nside', default=256, type='int')

parser.add_option('', '--ex', default=[], nargs=3, type='float')
parser.add_option('', '--ey', default=[], nargs=3, type='float')

parser.add_option('', '--Ntrial', default=10, type='int', 
    help='the number of times we randomly draw psi and ex, ey to check for agreement')
parser.add_option('', '--Nfreq', default=10, type='int',
    help='the number of frequency samples to use when generating plots')

parser.add_option('', '--color-map', default='OrRd', type='string')
parser.add_option('', '--annotation-color', default='k', type='string',
    help='the color of the annotations that mark the detector arms')

parser.add_option('', '--max-val', default=None, type='float')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()

if opts.tag:
    opts.tag = "_"+opts.tag

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

opts.verbose = opts.verbose or opts.Verbose

while len(opts.ex)!=3:
    opts.ex = [float(_) for _ in raw_input('--ex=').strip().split()]
opts.ex = np.array(opts.ex)
exTheta, exPhi = np.arccos(opts.ex[2]), np.arctan2(opts.ex[1], opts.ex[0])

while len(opts.ey)!=3:
    opts.ey = [float(_) for _ in raw_input('--ey=').strip().split()]
opts.ey = np.array(opts.ey)
eyTheta, eyPhi = np.arccos(opts.ey[2]), np.arctan2(opts.ey[1], opts.ey[0])

#-------------------------------------------------

### "T" sets some scale for the frequencies but is otherwise uninteresting
### without loss of generality, we set it to 1
T = 1.

### generate theta, phi, psi
npix = hp.nside2npix(opts.nside)
theta, phi = hp.pix2ang(opts.nside, np.arange(npix))

### test function calls
if opts.verbose:
    print "testing two formulations for agreement"
for _ in xrange(opts.Ntrial):
    if opts.Verbose:
        print '    %d / %d'%(_+1, opts.Ntrial)

    ex = np.random.rand(3)
    ex /= np.sum(ex**2)**0.5
#    ex = np.array([1,0,0])

    ey = np.random.rand(3)
    ey /= np.sum(ey**2)**0.5
#    ey = np.array([0,1,0])

    psi = np.random.rand(npix)*2*np.pi
    
    a = np.array(ant.const_antenna_response(theta, phi, psi, ex, ey))
    b = np.array(ant.antenna_response(theta, phi, psi, ex, ey, T=T))
    c = np.array(ant.antenna_response(theta, phi, np.zeros_like(theta), ex, ey, T=T))

    assert np.all(a==b), 'two formulations do not agree!'
    assert np.all(np.abs(np.sum(b**2,axis=0)-np.sum(c**2,axis=0))<1e-10), 'F+**2 + Fx**2 depends on psi!'

#------------------------

### now, we only work with the coordIndep formulation
if opts.verbose:
    print "plotting as a function of frequency"
freqs = np.linspace(0, 1./T, opts.Nfreq) ### the frequencies at which we evaluate antenna patterns
psi = np.zeros_like(theta, dtype=float)

Fp, Fx = ant.antenna_response(theta, phi, psi, opts.ex, opts.ey, T=T, freqs=freqs)

for ind, (freq, fp, fx) in enumerate(zip(freqs, Fp, Fx)):

    if opts.Verbose:
        print '  %d / %d'%(ind+1, opts.Nfreq)
        print '    f/fsr = %.6f'%(2*freqs[ind])

    title = "$f/f_\mathrm{fsr} = %.1f$"%(2*freqs[ind])

    #--- total magnitude
    fig = plt.figure()
    ax = fig.add_axes(axpos, projection='mollweide')

    ax.set_title(title)

    lalinf_plot.healpix_heatmap( (np.abs(fp)**2+np.abs(fx)**2)**0.5, cmap=plt.get_cmap(opts.color_map) )

    for theta, phi, text in [(exTheta, exPhi, '$\ e_x$'), (eyTheta, eyPhi, '$\ e_y$')]:
        dec = 0.5*np.pi-theta
        ax.plot(phi, dec, marker='o', markeredgecolor=opts.annotation_color, markerfacecolor='none', markersize=10, linewidth=2)
        ax.plot(phi, dec, marker='.', markeredgecolor=opts.annotation_color, markerfacecolor=opts.annotation_color, markersize=4)
        ax.text(phi+np.pi/36, dec, text, ha='left', va='top', fontsize=14, color=opts.annotation_color)

    ax.grid(True, which='both')

    cb = plt.colorbar(orientation='horizontal', shrink=0.8, pad=0.05)
    cb.set_label('$\sqrt{|F_+|^2+|F_\\times|^2}$')
    if opts.max_val!=None:
        cb.set_clim(vmin=0, vmax=opts.max_val)

    figname = "%s/mag_%04d%s.png"%(opts.output_dir, ind, opts.tag)
    if opts.verbose:
        print "    "+figname
    fig.savefig(figname)
    plt.close(fig)

    #--- F+ magnitude
    fig = plt.figure()
    ax = fig.add_axes(axpos, projection='mollweide')

    ax.set_title(title)

    lalinf_plot.healpix_heatmap( np.abs(fp)**2, cmap=plt.get_cmap(opts.color_map) )

    for theta, phi, text in [(exTheta, exPhi, '$\ e_x$'), (eyTheta, eyPhi, '$\ e_y$')]:
        dec = 0.5*np.pi-theta
        ax.plot(phi, dec, marker='o', markeredgecolor=opts.annotation_color, markerfacecolor='none', markersize=10, linewidth=2)
        ax.plot(phi, dec, marker='.', markeredgecolor=opts.annotation_color, markerfacecolor=opts.annotation_color, markersize=4)
        ax.text(phi+np.pi/36, dec, text, ha='left', va='top', fontsize=14, color=opts.annotation_color)

    ax.grid(True, which='both')

    cb = plt.colorbar(orientation='horizontal', shrink=0.8, pad=0.05)
    cb.set_label('$|F_+|^2$')
    if opts.max_val!=None:
        cb.set_clim(vmin=0, vmax=opts.max_val)

    figname = "%s/magF+_%04d%s.png"%(opts.output_dir, ind, opts.tag)
    if opts.verbose:
        print "    "+figname
    fig.savefig(figname)
    plt.close(fig)

    #--- F+ phase
    fig = plt.figure()
    ax = fig.add_axes(axpos, projection='mollweide')

    ax.set_title(title)

    lalinf_plot.healpix_heatmap( phs(fp)*rad2deg, cmap=plt.get_cmap(opts.color_map) )

    for theta, phi, text in [(exTheta, exPhi, '$\ e_x$'), (eyTheta, eyPhi, '$\ e_y$')]:
        dec = 0.5*np.pi-theta
        ax.plot(phi, dec, marker='o', markeredgecolor=opts.annotation_color, markerfacecolor='none', markersize=10, linewidth=2)
        ax.plot(phi, dec, marker='.', markeredgecolor=opts.annotation_color, markerfacecolor=opts.annotation_color, markersize=4)
        ax.text(phi+np.pi/36, dec, text, ha='left', va='top', fontsize=14, color=opts.annotation_color)

    ax.grid(True, which='both')

    cb = plt.colorbar(orientation='horizontal', shrink=0.8, pad=0.05)
    cb.set_label('phase $F_+$ [$^\circ$]')
    cb.set_clim(vmin=-180, vmax=180)

    figname = "%s/phsF+_%04d%s.png"%(opts.output_dir, ind, opts.tag)
    if opts.verbose:
        print "    "+figname
    fig.savefig(figname)
    plt.close(fig)

    #--- F+ real
    fig = plt.figure()
    ax = fig.add_axes(axpos, projection='mollweide')

    ax.set_title(title)

    lalinf_plot.healpix_heatmap( fp.real, cmap=plt.get_cmap(opts.color_map) )

    for theta, phi, text in [(exTheta, exPhi, '$\ e_x$'), (eyTheta, eyPhi, '$\ e_y$')]:
        dec = 0.5*np.pi-theta
        ax.plot(phi, dec, marker='o', markeredgecolor=opts.annotation_color, markerfacecolor='none', markersize=10, linewidth=2)
        ax.plot(phi, dec, marker='.', markeredgecolor=opts.annotation_color, markerfacecolor=opts.annotation_color, markersize=4)
        ax.text(phi+np.pi/36, dec, text, ha='left', va='top', fontsize=14, color=opts.annotation_color)

    ax.grid(True, which='both')

    cb = plt.colorbar(orientation='horizontal', shrink=0.8, pad=0.05)
    cb.set_label('$\mathcal{R}\{F_+\}$')
    if opts.max_val!=None:
        cb.set_clim(vmin=0, vmax=opts.max_val)

    figname = "%s/realF+_%04d%s.png"%(opts.output_dir, ind, opts.tag)
    if opts.verbose:
        print "    "+figname
    fig.savefig(figname)
    plt.close(fig)

    #--- F+ imag
    fig = plt.figure()
    ax = fig.add_axes(axpos, projection='mollweide')

    ax.set_title(title)

    lalinf_plot.healpix_heatmap( fp.imag, cmap=plt.get_cmap(opts.color_map) )

    for theta, phi, text in [(exTheta, exPhi, '$\ e_x$'), (eyTheta, eyPhi, '$\ e_y$')]:
        dec = 0.5*np.pi-theta
        ax.plot(phi, dec, marker='o', markeredgecolor=opts.annotation_color, markerfacecolor='none', markersize=10, linewidth=2)
        ax.plot(phi, dec, marker='.', markeredgecolor=opts.annotation_color, markerfacecolor=opts.annotation_color, markersize=4)
        ax.text(phi+np.pi/36, dec, text, ha='left', va='top', fontsize=14, color=opts.annotation_color)

    ax.grid(True, which='both')

    cb = plt.colorbar(orientation='horizontal', shrink=0.8, pad=0.05)
    cb.set_label('$\mathcal{I}\{F_+\}$')
    if opts.max_val!=None:
        cb.set_clim(vmin=0, vmax=opts.max_val)

    figname = "%s/imagF+_%04d%s.png"%(opts.output_dir, ind, opts.tag)
    if opts.verbose:
        print "    "+figname
    fig.savefig(figname)
    plt.close(fig)

    #--- Fx magnitude
    fig = plt.figure()
    ax = fig.add_axes(axpos, projection='mollweide')

    ax.set_title(title)

    lalinf_plot.healpix_heatmap( np.abs(fx)**2, cmap=plt.get_cmap(opts.color_map) )

    for theta, phi, text in [(exTheta, exPhi, '$\ e_x$'), (eyTheta, eyPhi, '$\ e_y$')]:
        dec = 0.5*np.pi-theta
        ax.plot(phi, dec, marker='o', markeredgecolor=opts.annotation_color, markerfacecolor='none', markersize=10, linewidth=2)
        ax.plot(phi, dec, marker='.', markeredgecolor=opts.annotation_color, markerfacecolor=opts.annotation_color, markersize=4)
        ax.text(phi+np.pi/36, dec, text, ha='left', va='top', fontsize=14, color=opts.annotation_color)

    ax.grid(True, which='both')

    cb = plt.colorbar(orientation='horizontal', shrink=0.8, pad=0.05)
    cb.set_label('$|F_\\times|^2$')
    if opts.max_val!=None:
        cb.set_clim(vmin=0, vmax=opts.max_val)

    figname = "%s/magFx_%04d%s.png"%(opts.output_dir, ind, opts.tag)
    if opts.verbose:
        print "    "+figname
    fig.savefig(figname)
    plt.close(fig)

    #--- Fx phase
    fig = plt.figure()
    ax = fig.add_axes(axpos, projection='mollweide')

    ax.set_title(title)

    lalinf_plot.healpix_heatmap( phs(fx)*rad2deg, cmap=plt.get_cmap(opts.color_map) )

    for theta, phi, text in [(exTheta, exPhi, '$\ e_x$'), (eyTheta, eyPhi, '$\ e_y$')]:
        dec = 0.5*np.pi-theta
        ax.plot(phi, dec, marker='o', markeredgecolor=opts.annotation_color, markerfacecolor='none', markersize=10, linewidth=2)
        ax.plot(phi, dec, marker='.', markeredgecolor=opts.annotation_color, markerfacecolor=opts.annotation_color, markersize=4)
        ax.text(phi+np.pi/36, dec, text, ha='left', va='top', fontsize=14, color=opts.annotation_color)

    ax.grid(True, which='both')

    cb = plt.colorbar(orientation='horizontal', shrink=0.8, pad=0.05)
    cb.set_label('phase $F_\\times$ [$^\circ$]')
    cb.set_clim(vmin=-180, vmax=180)

    figname = "%s/phsFx_%04d%s.png"%(opts.output_dir, ind, opts.tag)
    if opts.verbose:
        print "    "+figname
    fig.savefig(figname)
    plt.close(fig)

    #--- Fx real
    fig = plt.figure()
    ax = fig.add_axes(axpos, projection='mollweide')

    ax.set_title(title)

    lalinf_plot.healpix_heatmap( fx.real, cmap=plt.get_cmap(opts.color_map) )

    for theta, phi, text in [(exTheta, exPhi, '$\ e_x$'), (eyTheta, eyPhi, '$\ e_y$')]:
        dec = 0.5*np.pi-theta
        ax.plot(phi, dec, marker='o', markeredgecolor=opts.annotation_color, markerfacecolor='none', markersize=10, linewidth=2)
        ax.plot(phi, dec, marker='.', markeredgecolor=opts.annotation_color, markerfacecolor=opts.annotation_color, markersize=4)
        ax.text(phi+np.pi/36, dec, text, ha='left', va='top', fontsize=14, color=opts.annotation_color)

    ax.grid(True, which='both')

    cb = plt.colorbar(orientation='horizontal', shrink=0.8, pad=0.05)
    cb.set_label(' $\mathcal{R}\{F_\\times\}$')
    if opts.max_val!=None:
        cb.set_clim(vmin=0, vmax=opts.max_val)

    figname = "%s/realFx_%04d%s.png"%(opts.output_dir, ind, opts.tag)
    if opts.verbose:
        print "    "+figname
    fig.savefig(figname)
    plt.close(fig)

    #--- Fx imag
    fig = plt.figure()
    ax = fig.add_axes(axpos, projection='mollweide')

    ax.set_title(title)

    lalinf_plot.healpix_heatmap( fx.imag, cmap=plt.get_cmap(opts.color_map) )

    for theta, phi, text in [(exTheta, exPhi, '$\ e_x$'), (eyTheta, eyPhi, '$\ e_y$')]:
        dec = 0.5*np.pi-theta
        ax.plot(phi, dec, marker='o', markeredgecolor=opts.annotation_color, markerfacecolor='none', markersize=10, linewidth=2)
        ax.plot(phi, dec, marker='.', markeredgecolor=opts.annotation_color, markerfacecolor=opts.annotation_color, markersize=4)
        ax.text(phi+np.pi/36, dec, text, ha='left', va='top', fontsize=14, color=opts.annotation_color)

    ax.grid(True, which='both')

    cb = plt.colorbar(orientation='horizontal', shrink=0.8, pad=0.05)
    cb.set_label('$\mathcal{I}\{F_\\times\}$')
    if opts.max_val!=None:
        cb.set_clim(vmin=0, vmax=opts.max_val)

    figname = "%s/imagFx_%04d%s.png"%(opts.output_dir, ind, opts.tag)
    if opts.verbose:
        print "    "+figname
    fig.savefig(figname)
    plt.close(fig)


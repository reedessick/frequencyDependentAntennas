#!/usr/bin/env python

usage = "plot_waveforms [--options]"
description = "plot time-domain waveforms projected inot a detector both with and without the correction to the antenna patterns based on the frequency"
author = "Reed Essick"

#-------------------------------------------------

import os

import numpy as np
import freqDepAntennas as ant

from lal import lal
from lal.lal import MSUN_SI as LAL_MSUN_SI
from lal.lal import PC_SI as LAL_PC_SI
from lal.lal import C_SI as LAL_C_SI
from lal.lal import G_SI as LAL_G_SI

import lalsimulation.lalsimulation as lalsim

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt
plt.rcParams['text.usetex'] = True

from optparse import OptionParser

#-------------------------------------------------

deg2rad = np.pi/180
rad2deg = 1./deg2rad

def tukey(N, alpha):
    """
    generate a tukey window
    The Tukey window, also known as the tapered cosine window, can be regarded as a cosine lobe of width \alpha * N / 2
        that is convolved with a rectangle window of width (1 - \alpha / 2). At \alpha = 1 it becomes rectangular, and
        at \alpha = 0 it becomes a Hann window. 
    """
    # Special cases
    if alpha <= 0:
        return np.ones(N) #rectangular window
    elif alpha >= 1:
        return np.hanning(N)

    # Normal case
    x = np.linspace(0, 1, N)
    w = np.ones(x.shape)

    # first condition 0 <= x < alpha/2
    first_condition = x<alpha/2
    w[first_condition] = 0.5 * (1 + np.cos(2*np.pi/alpha * (x[first_condition] - alpha/2) ))

    # second condition already taken care of

    # third condition 1 - alpha / 2 <= x <= 1
    third_condition = x>=(1 - alpha/2)
    w[third_condition] = 0.5 * (1 + np.cos(2*np.pi/alpha * (x[third_condition] - 1 + alpha/2)))

    return w

#-------------------------------------------------

parser = OptionParser(usage=usage, description=description)

parser.add_option('-v', '--verbose', default=False, action='store_true')
parser.add_option('-V', '--Verbose', default=False, action='store_true')

parser.add_option('', '--theta-phi-psi', nargs=3, default=[], type='float', action='append',
    help='theta, phi, psi triples specified in degrees. Can be repeated')

parser.add_option('', '--ex', default=[], nargs=3, type='float')
parser.add_option('', '--ey', default=[], nargs=3, type='float')

parser.add_option('-L', '--L', default=4e3, type='float',
    help='the length of the arm, in meters')

parser.add_option('', '--m1', default=1.4, type='float',
    help='DEFAULT=1.4')
parser.add_option('', '--m2', default=1.4, type='float',
    help="DEFAULT=1.4")

parser.add_option('', '--approximant', default='TaylorF2', type='string',
    help='DEFAULT=TaylorF2')

parser.add_option('', '--plot-fmin', default=30, type='float')
parser.add_option('', '--plot-tmin', default=-5, type='float')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()

opts.verbose = opts.verbose or opts.Verbose

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

while len(opts.ex)!=3:
    opts.ex = [float(_) for _ in raw_input('--ex=').strip().split()]
opts.ex = np.array(opts.ex)

while len(opts.ey)!=3:
    opts.ey = [float(_) for _ in raw_input('--ey=').strip().split()]
opts.ey = np.array(opts.ey)

#-------------------------------------------------

### generate waveform
if opts.Verbose:
    print "generating waveform"

# technical parameters for vector length
srate = 4096.0

seglen = 64.0
length = srate*seglen # lenght of 60 secs, hardcoded. May call a LALSimRoutine to get an idea

deltaT = 1/srate
deltaF = 1.0 / (length * deltaT);

#frequencies
f_min = 10
f_ref = 40 ### reference frequency for precessing spins
f_max = float(srate)/2.0 ### up to Nyquist

# reference parameters
phiRef = np.pi*3/2
longAscNodes = 0.
eccentricity = 0.
meanPerAno = 0.

# CBC params:
m1 = opts.m1*LAL_MSUN_SI
m2 = opts.m2*LAL_MSUN_SI

#spins
s1x = 0.0
s1y = 0.0
s1z = 0.0
s2x = 0.0
s2y = 0.0
s2z = 0.0

#extrinsic params
distance = 450*LAL_PC_SI*1.0e6
iota = np.pi*2/6

## Define which waveform we want to use
approximant = lalsim.GetApproximantFromString( opts.approximant )

### lalpars
lalpars = lal.CreateDict()

## build the waveforms!
hfp, hfx = lalsim.SimInspiralChooseFDWaveform(
    m1, m2, 
    s1x, s1y, s1z, 
    s2x, s2y, s2z, 
    distance, 
    iota, 
    phiRef, 
    longAscNodes, 
    eccentricity, 
    meanPerAno, 
    deltaF, 
    f_min, 
    f_max, 
    f_ref, 
    lalpars, 
    approximant,
)

freqs = np.array([hfp.f0+i*hfp.deltaF for i in np.arange(hfp.data.length)])
times = np.arange(length+1)*deltaT
times -= times[-1]

### zero waveforms beyond isco
if opts.approximant=="TaylorF2":
    isco = LAL_C_SI**3/(LAL_G_SI*(m1+m2)) / (np.pi * 6**(3./2))
    truth = freqs > isco
    hfp.data.data[truth] = 0
    hfx.data.data[truth] = 0

#-------------------------------------------------

if opts.verbose:
    print "plotting waveforms"

for ind, (theta, phi, psi) in enumerate(opts.theta_phi_psi):

    if opts.Verbose:
        print "    theta : %.3f deg"%theta
        print "    phi   : %.3f deg"%phi
        print "    psi   : %.3f deg"%psi

    title = "$\\theta = %.3f^\circ$  $\phi = %.3f^\circ$  $\psi = %.3f^\circ$"%(theta, phi, psi)

    theta *= deg2rad
    phi *= deg2rad
    psi *= deg2rad

    ### project waveforms into detectors
    if opts.Verbose:
        print "        projecting into detector"

    # compute zero-frequency response
    Fp0, Fx0 = ant.const_antenna_response([theta], [phi], [psi], opts.ex, opts.ey)
    sf0 = Fp0*hfp.data.data + Fx0*hfx.data.data

    # compute correct response
    Fp, Fx = ant.antenna_response([theta], [phi], [psi], opts.ex, opts.ey, T=opts.L/LAL_C_SI, freqs=freqs)
    Fp = Fp.flatten()
    Fx = Fx.flatten()
    sf = Fp*hfp.data.data + Fx*hfx.data.data

    # plot in frequency domain
    if opts.Verbose:
        print "        plotting in freq domain"

    fig = plt.figure()
    mag_ax = plt.subplot(2,1,1)
    phs_ax = plt.subplot(2,1,2)

    mag_ax.plot(freqs, np.abs(sf0), color='b', alpha=0.5, label='$F_+(0)$, $F_\\times(0)$')
    mag_ax.plot(freqs, np.abs(sf), color='r', alpha=0.5, label='$F_+(f)$, $F_\\times(f)$')

    phs_ax.plot(freqs, np.arctan2(sf0.imag, sf0.real)*rad2deg, 'b', alpha=0.5, label='$F_+(0)$, $F_\\times(0)$')
    phs_ax.plot(freqs, np.arctan2(sf.imag, sf.real)*rad2deg, 'r', alpha=0.5, label='$F_+(f)$, $F_\\times(f)$')

    plt.setp(mag_ax.get_xticklabels(), visible=False)
    phs_ax.set_xlabel('$f$ [Hz]')

    mag_ax.set_ylabel('$|\\tilde{h}(f)|$')
    phs_ax.set_ylabel('phase $\\tilde{h}(f)$ [$^\circ$]')

    mag_ax.grid(True, which='both')
    phs_ax.grid(True, which='both')

    mag_ax.set_yscale('log')
    mag_ax.set_xscale('log')

    phs_ax.set_xscale('log')

    mag_ax.legend(loc='best')

    mag_ax.set_xlim(xmin=opts.plot_fmin, xmax=freqs[-1])
    phs_ax.set_xlim(mag_ax.get_xlim())

    phs_ax.set_ylim(ymin=-181, ymax=181)
    phs_ax.set_yticks([-180, -150, -120, -90, -60, -30, 0, 30, 60, 90, 120, 150, 180])

    mag_ax.set_title(title)

    plt.subplots_adjust(hspace=0.05)

    figname = "%s/waveform-freq_%04d%s.png"%(opts.output_dir, ind, opts.tag)
    if opts.verbose:
        print "    "+figname
    fig.savefig(figname)
    plt.close(fig)

    #---

    fig = plt.figure()
    mag_ax = plt.subplot(2,1,1)
    phs_ax = plt.subplot(2,1,2)

    mag_ax.plot(freqs, np.abs(sf0-sf), color='b', alpha=0.5)

    phs_ax.plot(freqs, np.arctan2(sf0.imag-sf.imag, sf0.real-sf.real)*rad2deg, 'b', alpha=0.5)

    plt.setp(mag_ax.get_xticklabels(), visible=False)
    phs_ax.set_xlabel('$f$ [Hz]')

    mag_ax.set_ylabel('$|\\tilde{h}_0(f) - \\tilde{h}(f)|$')
    phs_ax.set_ylabel('phase $\\tilde{h}(f) - \\tilde{h}(f)$ [$^\circ$]')

    mag_ax.grid(True, which='both')
    phs_ax.grid(True, which='both')

    mag_ax.set_yscale('log')
    mag_ax.set_xscale('log')

    phs_ax.set_xscale('log')

    mag_ax.set_xlim(xmin=opts.plot_fmin, xmax=freqs[-1])
    phs_ax.set_xlim(mag_ax.get_xlim())

    phs_ax.set_ylim(ymin=-181, ymax=181)
    phs_ax.set_yticks([-180, -150, -120, -90, -60, -30, 0, 30, 60, 90, 120, 150, 180])

    mag_ax.set_title(title)

    plt.subplots_adjust(hspace=0.05)

    figname = "%s/residual-freq_%04d%s.png"%(opts.output_dir, ind, opts.tag)
    if opts.verbose:
        print "    "+figname
    fig.savefig(figname)
    plt.close(fig)

    # iFFT to get back to the time-domain
    if opts.Verbose:
        print "        transforming from frequency domain to time domain"

    ### multiply by a bandpass 
    win = tukey(len(sf0), 0.25) ### apply a tukey window in the frequency domain
    sf0 *= win
    sf *= win

    ### add the negative frequency components
    sf0 = np.concatenate([np.conjugate(sf0[::-1][:-1]), sf0])
    sf = np.concatenate([np.conjugate(sf[::-1][:-1]), sf])

    st0 = np.fft.ifft(np.fft.ifftshift(sf0)).real ### only take the real part
    st = np.fft.ifft(np.fft.ifftshift(sf)).real   ### imag << real, as expected

    ### plot in time domain
    if opts.Verbose:
        print "        plotting in time domain"

    fig = plt.figure()
    ax = fig.gca()

    ax.plot(times, st0, 'b', alpha=0.5, label='$F_+(0)$, $F_\\times(0)$')
    ax.plot(times, st, 'r', alpha=0.5, label='$F_+(f)$, $F_\\times(f)$')

    ax.set_xlabel('$t$ [sec]')
    ax.set_ylabel('$h(t)$')

    ax.grid(True, which='both')
    ax.legend(loc='best')

    ax.set_xlim(xmin=opts.plot_tmin, xmax=-0.1*opts.plot_tmin)
    ylim = np.max(np.abs(ax.get_ylim()))
    ax.set_ylim(ymin=-ylim, ymax=ylim)

    ax.set_title(title)

    figname = "%s/waveform-time_%04d%s.png"%(opts.output_dir, ind, opts.tag)
    if opts.verbose:
        print "    "+figname
    fig.savefig( figname )
    plt.close(fig)

    #---

    fig = plt.figure()
    ax = fig.gca()

    ax.plot(times, st0-st, 'b', alpha=0.5)

    ax.set_xlabel('$t$ [sec]')
    ax.set_ylabel('$h_0(t) - h(t)$')

    ax.grid(True, which='both')

    ax.set_xlim(xmin=opts.plot_tmin, xmax=-0.1*opts.plot_tmin)
    ylim = np.max(np.abs(ax.get_ylim()))
    ax.set_ylim(ymin=-ylim, ymax=ylim)

    ax.set_title(title)

    figname = "%s/residual-time_%04d%s.png"%(opts.output_dir, ind, opts.tag)
    if opts.verbose:
        print "    "+figname
    fig.savefig( figname )
    plt.close(fig)

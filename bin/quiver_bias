#!/usr/bin/env python

usage = "quiver_bias [--options]"
description = "produce quiver plots showing how the bias behaves as a function of source location"
author = "Reed Essick"

#-------------------------------------------------

import os
import sys

import simUtils as utils
import freqDepAntennas as ant

import numpy as np
import healpy as hp

import matplotlib
matplotlib.use('Agg')
from matplotlib import cm
from matplotlib import pyplot as plt
plt.rcParams.update({
    'text.usetex':True,
    'font.family': 'serif',
#    'font.serif': ['Computer Modern'],
#    "axes.grid": True,
#    "axes.axisbelow": False,
#    "axes.formatter.limits": (-3, 4),
    "axes.labelsize": 14,
    "axes.titlesize": 14,
    "figure.subplot.bottom": 0.13,
    "figure.subplot.left": 0.20,
    "figure.subplot.right": 0.85,
    "figure.subplot.top": 0.95,
    "grid.color": 'gray',
#    "image.aspect": 'auto',
#    "image.interpolation": 'nearest',
#    "image.origin": 'lower',
    "xtick.labelsize": 14,
    "ytick.labelsize": 14,
})

from lalinference import plot as lalinf_plot

from optparse import OptionParser

#-------------------------------------------------

axpos = [0.07, 0.05, 0.92, 0.90]

#-------------------------------------------------

parser = OptionParser(usage=usage, description=description)

parser.add_option('-v', '--verbose', default=False, action='store_true')
parser.add_option('-V', '--Verbose', default=False, action='store_true')

parser.add_option('-i', '--instrument', default=[], type='string', action='append')

parser.add_option('', '--nside', default=32, type='int')

parser.add_option('', '--color-map', default='OrRd', type='string')
parser.add_option('', '--max-dt', default=None, type='float',
    help='specified in seconds. used for heatmap')
parser.add_option('', '--min-dt', default=None, type='float',
    help='specified in seconds. used for heatmap')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

opts.verbose = opts.verbose or opts.Verbose

#-------------------------------------------------

if opts.verbose:
    print( 'setting up detectors' )
### set up detectors
detectors = [utils.known_detectors[_] for _ in opts.instrument]

if opts.verbose:
    print( 'computing shifts in time-of-arrival at each IFO from antenna responses\' phase' )
### iterate over source locations
npix = hp.nside2npix(opts.nside)
theta_inj, phi_inj = hp.pix2ang(opts.nside, np.arange(npix))
phi_inj[phi_inj>np.pi] -= 2*np.pi ### needed for plotting, should not affect anything else

dts = np.empty((npix, len(detectors)), dtype=float)

### for now, hard-code inclination and polarization angle. 
### FIXME: may want to marginalize over this at some point...
iota = 0
cosiota = np.cos(iota)
plus = 0.5*(1+cosiota**2)
cros = 1j*cosiota

psi = 0

### also hard-code frequencies
### FIXME: may want to allow the maximum frequency to be user-specified at some point
freqs = np.arange(0, 128, 1.)

for ind in xrange(npix):

    if opts.Verbose:
        sys.stdout.write('\r%d / %d'%(ind+1, npix))
        sys.stdout.flush()

    for jnd, detector in enumerate(detectors):
        Fp, Fx = ant.antenna_response(theta_inj[ind], phi_inj[ind], psi, detector.ex, detector.ey, T=detector.T, freqs=freqs)
        Fp0, Fx0 = ant.const_antenna_response(theta_inj[ind], phi_inj[ind], psi, detector.ex, detector.ey)

        x = (plus*Fp.flatten() + cros*Fx.flatten())/(plus*Fp0+cros*Fx0)
        phs = np.arctan2(x.imag, x.real)

        dt = np.polyfit(freqs, phs, deg=1)[0] ### extract the slope of a linear relationship between phase and freqs
                                          ### this corresponds to the time-of-arrival offset
        dts[ind,jnd] = dt

#------------------------

if opts.verbose:
    print( 'generating heatmaps of time-of-arrival delays' )
        
for jnd, detector in enumerate(detectors):

    fig = plt.figure()
    ax = fig.add_axes(axpos, projection='mollweide')

    ### heatmap
    x = dts[:,jnd]
    if opts.min_dt!=None:
        x[x<opts.min_dt]==opts.min_dt
    if opts.max_dt!=None:
        x[x>opts.max_dt]==opts.max_dt
    lalinf_plot.healpix_heatmap( x*1e3, cmap=plt.get_cmap(opts.color_map) )

    ### decorate
    cb = plt.colorbar(orientation='horizontal', shrink=0.8, pad=0.05)
    cb.set_label('$\delta t$ [ms]')

    ax.grid(True, which='both')

    ax.set_title(detector.name)

    ### label detector's frame of reference
    for e, label in [(detector.ex, '$e_x$'), (detector.ey, '$e_y$'), (detector.ez, '$e_z$')]:
        theta = np.arccos(e[2])
        phi = np.arctan2(e[1], e[0])

        dec = 0.5*np.pi-theta
        ax.plot(phi, dec, marker='o', markerfacecolor='none', markersize=10)
        ax.plot(phi, dec, marker='.', markerfacecolor='none', markersize=1)
        ax.text(phi, dec, label, ha='left', va='top', fontsize=14)

    ### save
    figname = "%s/quiver-skymap-%s%s.png"%(opts.output_dir, detector.name, opts.tag)
    if opts.verbose:
        print( '    saving : '+figname )
    fig.savefig(figname)
    plt.close(figname)

#------------------------

if opts.verbose:
    print( 'generating quiver of biases on a pair-wise detector basis' )

for jnd1, det1 in enumerate(detectors[:-1]):
    for jnd2, det2 in enumerate(detectors[jnd1+1:]):

        pole, maxDT = utils.IFOs2pole( det1.name, det2.name, return_maxDT=True )
        theta_los, phi_los = utils.ThetaPhi2LineOfSight(theta_inj, phi_inj, pole=pole)

        new_costheta = (maxDT*np.cos(theta_los) - dts[:,jnd1]-dts[:,jnd1+1+jnd2])/maxDT
        new_costheta[new_costheta>1] = 1   ### constraints based on range of cos(theta)
        new_costheta[new_costheta<-1] = -1

        theta_rec, phi_rec = utils.lineOfSight2ThetaPhi(np.arccos(new_costheta), phi_los, pole=pole)

        fig = plt.figure()
        ax = fig.add_axes(axpos, projection='mollweide')

        for ind in xrange(npix):
            d_inj = 0.5*np.pi-theta_inj[ind]
            p_inj = phi_inj[ind]

            d_rec = 0.5*np.pi-theta_rec[ind]
            p_rec = phi_rec[ind]

            dp = (p_rec-p_inj)
            if np.abs(dp) > np.pi:
                dp = (p_rec-p_inj)
            dd = (d_rec-d_inj)

            norm = (dd**2+dp**2)**0.5
            f = 0.5
            
            ax.arrow(p_inj, d_inj, dp*(1-f), dd*(1-f), head_width=0.5*f*norm, head_length=f*norm, fc='k', ec='k', alpha=0.5)

        ax.set_title('%s and %s'%(det1.name, det2.name))

        ### save
        figname = "%s/quiver-skymap-%s-%s%s.png"%(opts.output_dir, det1.name, det2.name, opts.tag)
        if opts.verbose:
            print( '    saving : '+figname )
        fig.savefig(figname)
        plt.close(figname)

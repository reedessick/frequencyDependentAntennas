#!/usr/bin/env python

usage = "localize [--options] theta phi psi iota distance timeAtCoalescence"
description = """\
a quick sampler over extrinsic parameters to study the effects of frequency dependent antenna patterns on localization. 
Angles specified as arguments should be in radians, unless --args-are-degrees is provided. 
Distance should be in Mpc."""
author = "Reed Essick"

#-------------------------------------------------

import os
import sys

import time

import numpy as np
import simUtils as utils

import emcee

from lal import lal
from lal.lal import MSUN_SI as LAL_MSUN_SI
from lal.lal import PC_SI as LAL_PC_SI
from lal.lal import C_SI as LAL_C_SI
from lal.lal import G_SI as LAL_G_SI

import lalsimulation as lalsim

from optparse import OptionParser

#-------------------------------------------------

known_detectors = {
    'H' : utils.LHO,
    'L' : utils.LLO,
    'V' : utils.Virgo,
}

Ndim = 6 # theta, phi, psi, iota, distance, tac

#-------------------------------------------------

parser = OptionParser(usage=usage, description=description)

### output options

parser.add_option('-v', '--verbose', default=False, action='store_true')
parser.add_option('-V', '--Verbose', default=False, action='store_true',
    help='print progress bar during sampling')
parser.add_option('', '--status-width', default=100, type='int',
    help='the width of the status bar printed if --Verbose is supplied. Default=100')
parser.add_option('', '--time', default=False, action='store_true')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

### options about the network and assumptions we make about antenna patterns

parser.add_option('-i', '--instrument', default=[], type='string',
    help='Will draw random Gaussian noise for each and inject a signal. \
Should be repeated if there are multiple instruments. Must be one of : %s'%(', '.join(known_detectors.keys())))

parser.add_option('', '--zeroFreq', default=False, action='store_true',
    help='use the zero frequency limit for antenna response when localizing.\
Note: we will *always* inject the signal with the correct response, which accounts for non-zero frequencies.')

### parameters about the samplers

parser.add_option('-N', '--Nwalkers', default=250, type='int', 
    help='the number of walkers for the ensemble sampler')
parser.add_option('-n', '--Nsteps', default=1000, type='int',
    help='the number of steps each walker will take')
parser.add_option('', '--threads', default=1, type='int',
    help='the number of threads used when sampling the posterior')
parser.add_option('', '--NpriorSteps', default=100, type='int', 
    help='the number of steps taken when sampling from the prior')

parser.add_option('', '--min-distance', default=1, type='float',
    help='in Mpc. DEFAULT=1')
parser.add_option('', '--max-distance', default=1000, type='float',
    help='in Mpc. DEFAULT=1000')

parser.add_option('', '--min-tac', default=-1.0, type='float',
    help='in seconds. DEFAULT=-1.0')
parser.add_option('', '--max-tac', default=+1.0, type='float',
    help='in seconds. DEFAULT=+1.0')

### parameters about the injected signal
parser.add_option('', '--m1', default=1.4, type='float',
    help='in Msun. DEFAULT=1.4')
parser.add_option('', '--m2', default=1.4, type='float',
    help="in Msun. DEFAULT=1.4")

parser.add_option('', '--s1z', default=0.0, type='float',
    help='DEFAULT=0')
parser.add_option('', '--s2z', default=0.0, type='float',
    help='DEFAULT=0')

parser.add_option('', '--phiRef', default=1.5*np.pi, type='float',
    help='in rad. DEFAULT=3*pi/2')

parser.add_option('', '--args-are-degrees', default=False, action='store_true',
    help='interpret angles specified as arguments in degrees instead of radians')

### signal processing params

parser.add_option('', '--f-min', default=10., type='float',
    help='in Hz. DEFAULT=10')
parser.add_option('', '--f-ref', default=40., type='float',
    help='in Hz. DEFAULT=40')

parser.add_option('', '--srate', default=4096., type='float',
    help='in Hz. DEFAULT=4096')
parser.add_option('', '--seglen', default=64., type='float',
    help='in sec. DEFAULT=64')

opts, args = parser.parse_args()

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

assert len(opts.instrument), 'please supply at least one instrument\n%s'%usage
assert np.all([known_detectors.has_key(ifo) for ifo in opts.instrument]), 'please supply only known ifos\n%s'%(', '.join(known_detectors.keys()))

assert len(args)==Ndim, 'please supply exactly %d input arguments\n%s'%(Ndim, usage)
theta, phi, psi, iota, distance, tac = [float(_) for _ in args]
if opts.args_are_degrees:
    deg2rad = np.pi/180
    theta *= deg2rad
    phi *= deg2rad
    psi *= deg2rad
    iota *= deg2rad

opts.verbose = opts.verbose or opts.Verbose or opts.time

#-------------------------------------------------

if opts.verbose:
    print( 'setting up arguments' )
# technical parameters for vector length
length = opts.srate*opts.seglen 

deltaT = 1.0/opts.srate
deltaF = 1.0 / (length * deltaT);

#frequencies
isco = LAL_C_SI**3/(LAL_G_SI*(opts.m1+opts.m2)*LAL_MSUN_SI) / (np.pi * 6**(3./2))
f_max = min(float(opts.srate)/2.0, isco) ### up to Nyquist or isco

## build the waveforms!
h = lalsim.SimInspiralTaylorF2(
    opts.phiRef,
    deltaF,
    opts.m1*LAL_MSUN_SI, 
    opts.m2*LAL_MSUN_SI,
    opts.s1z, 
    opts.s2z,
    opts.f_min, 
    f_max, 
    opts.f_ref,
    distance*LAL_PC_SI*1e6,
    lal.CreateDict(),
)
freqs = np.array([h.f0+i*h.deltaF for i in np.arange(h.data.length)])
h = h.data.data ### I only care about the frequency vector

### detectors
detectors = [known_detectors[ifo] for ifo in opts.instrument]

### data
hpf, hxf = utils.h2pol(utils.h2hAtT(freqs, h, tac), iota)
data = [detector.drawNoise(freqs)+detector.project(freqs, hpf, hxf, theta, phi, psi, zeroFreq=False) for detector in detectors]

### set up arguments
args = (freqs, data, h, detectors)
kwargs = {
    'zeroFreq':opts.zeroFreq,
    'minDistance':opts.min_distance,
    'maxDistance':opts.max_distance,
    'minT0':opts.min_tac,
    'maxT0':opts.max_tac,
}

### FIXME:
###    may want to just start sampler with a simple ball around the injected location using
###    emcee.utils.simple_ball(p0, std, size=1)
###    may lead to faster convergence to desired distribution, although we are likely to be dominated by statistical
###    sampling error anyway.

### FIXME: 
###    insead of sampling the prior, we may want to sample the prior convolved with the detector network's sensitivity
###    basically, fold in a noise weighted measure of (F+^2 + Fx^2) somehow
###    this may be more trouble than it's worth
sampler = emcee.EnsembleSampler(opts.Nwalkers, Ndim, utils.lnPrior, kwargs=kwargs)

p0 = np.random.rand(opts.Nwalkers, Ndim)
p0[:,0] *= np.pi
p0[:,1] *= 2*np.pi
p0[:,2] *= 2*np.pi
p0[:,3] *= np.pi
p0[:,4] = opts.min_distance + (opts.max_distance-opts.min_distance)*p0[:,4]
p0[:,5] = opts.min_tac + (opts.max_tac-opts.min_tac)*p0[:,5]

if opts.verbose:
    print( 'sampling from prior to get starting points' )
    if opts.time:
        t0 = time.time()

if opts.Verbose:
    template = '\r[%s%s] %.2f'
    sys.stdout.write(template%('', ' '*opts.status_width, 0))
    sys.stdout.flush()
    for i, (p0, _, _) in enumerate(sampler.sample(p0, iterations=opts.NpriorSteps)):
        f = (i+1.)/opts.NpriorSteps
        n = int((opts.status_width)*f)
        sys.stdout.write(template%('-'*n, ' '*(opts.status_width-n), f*100))
        sys.stdout.flush()
    sys.stdout.write("\n")

else:
    p0, _, _ = sampler.run_mcmc(p0, opts.NpriorSteps)

if opts.time:
    print( '    %.3f sec'%(time.time()-t0) )

#------------------------

if opts.verbose:
    print( 'setting up sampler' )
sampler = emcee.EnsembleSampler(
    opts.Nwalkers, 
    Ndim, 
    utils.lnPosterior, 
    args=args, 
    kwargs=kwargs, 
    threads=opts.threads,
)

if opts.verbose:
    print( 'running sampler' )
    if opts.time:
        t0 = time.time()

if opts.Verbose: ### print a progress bar while sampling
    template = '\r[%s%s] %.2f'
    sys.stdout.write(template%('', ' '*opts.status_width, 0))
    sys.stdout.flush()
    for i, result in enumerate(sampler.sample(p0, iterations=opts.Nsteps)):
        f = (i+1.)/opts.Nsteps
        n = int((opts.status_width)*f)
        sys.stdout.write(template%('-'*n, ' '*(opts.status_width-n), f*100))
        sys.stdout.flush()
    sys.stdout.write("\n")

else: ### just sample silently
    sampler.run_mcmc(p0, opts.Nsteps)

if opts.time:
    print( '    %.3f sec'%(time.time()-t0) )

#------------------------
### write the output into a file

filename = '%s/localize%s.txt'%(opts.output_dir, opts.tag)
if opts.verbose:
    print( 'writing output to : %s'%filename )

file_obj = open(filename, 'w')
print >> file_obj, '# theta : %.5f'%theta
print >> file_obj, '# phi : %.5f'%phi
print >> file_obj, '# psi : %.5f'%psi
print >> file_obj, '# iota : %.5f'%iota
print >> file_obj, '# distanceMpc : %.5f'%distance
print >> file_obj, '# timeAtCoalescence : %9.6f'%tac
print >> file_obj, '# Nwalkers : %d'%opts.Nwalkers

### report how the sampler performed
message = 'acceptance_fraction : %s'%(' '.join('%.5f'%_ for _ in sampler.acceptance_fraction))
if opts.verbose:
    print( message )
print >> file_obj, '# '+message

try:
    message = 'autocorrelation length : %s'%(' '.join('%.5f'%_ for _ in sampler.acor))
except emcee.autocorr.AutocorrError: # chain is too short
    message = 'chain is too short for autocorrelation analysis'
if opts.verbose:
    print( message )
print >> file_obj, '# '+message

### report the samples
print >> file_obj, 'k lnprob       theta        phi         psi         iota    distanceMpc timeAtCoalescence'
for walker in xrange(opts.Nwalkers):
    for iteration in xrange(opts.Nsteps):
        lnpost = sampler.lnprobability[walker, iteration]
        params = sampler.chain[walker, iteration]
        print >> file_obj, '%d %4.9f %1.9f %1.9f %1.9f %1.9f %6.9f %9.6f'%tuple([walker, lnpost]+list(params))
file_obj.close()

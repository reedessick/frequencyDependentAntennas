#!/usr/bin/env python

usage = "localize [--options] theta phi psi iota distance timeAtCoalescence"
description = """\
a quick sampler over extrinsic parameters to study the effects of frequency dependent antenna patterns on localization. 
Angles specified as arguments should be in radians, unless --args-are-degrees is provided. 
Distance should be in Mpc."""
author = "Reed Essick"

#-------------------------------------------------

import os
import sys

import time

import numpy as np
import healpy as hp

import simUtils as utils

import emcee

from lal import lal
from lal.lal import MSUN_SI as LAL_MSUN_SI
from lal.lal import PC_SI as LAL_PC_SI
from lal.lal import C_SI as LAL_C_SI
from lal.lal import G_SI as LAL_G_SI

import lalsimulation as lalsim

from optparse import OptionParser

#-------------------------------------------------

known_detectors = {
    'H' : utils.LHO,
    'L' : utils.LLO,
    'V' : utils.Virgo,
}

Ndim = 6 # theta, phi, psi, iota, distance, tac

#-------------------------------------------------

parser = OptionParser(usage=usage, description=description)

### output options

parser.add_option('-v', '--verbose', default=False, action='store_true')
parser.add_option('-V', '--Verbose', default=False, action='store_true',
    help='print progress bar during sampling')
parser.add_option('', '--status-width', default=100, type='int',
    help='the width of the status bar printed if --Verbose is supplied. Default=100')
parser.add_option('', '--time', default=False, action='store_true')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

### checkpointing

parser.add_option('', '--setup', default=None, type='string',
    help='a path to a pickled set-up file. If not supplied, will generate necessary \
data on the fly from other options. If supplied, other options will be ignored.')

parser.add_option('', '--resume', default=None, type='string',
    help='a path to an output file from which we can pick up the MCMC sampling. If supplied, \
will ignore options about how to initialize the chains. Otherwise, will initialize the chains \
according to other options. NOTE: this will over-ride --Nwalkers')

### options about the network and assumptions we make about antenna patterns

parser.add_option('-i', '--instrument', default=[], type='string', action='append',
    help='Will draw random Gaussian noise for each and inject a signal. \
Should be repeated if there are multiple instruments. Must be one of : %s'%(', '.join(known_detectors.keys())))

parser.add_option('', '--zeroFreq', default=False, action='store_true',
    help='use the zero frequency limit for antenna response when localizing.\
Note: we will *always* inject the signal with the correct response, which accounts for non-zero frequencies.')

parser.add_option('', '--line-of-sight', nargs=2, default=None, type='string',
    help='sample in the line-of-sight frame defined by 2 known detectors (eg: "--line-of-sight H L").\
If specified, injection args will will be interpreted in Earth-Fixed coords and posterior samples will be reported \
in Earth-Fixed coords, but the sampler will use the line-of-sight frame.')

parser.add_option('', '--zeroNoise', default=False, action='store_true',
    help='zero the noise in the detectors, so there is only the signal injected')

### parameters about the samplers

parser.add_option('-N', '--Nwalkers', default=250, type='int', 
    help='the number of walkers for the ensemble sampler')
parser.add_option('-n', '--Nsteps', default=1000, type='int',
    help='the number of steps each walker will take')
parser.add_option('', '--threads', default=1, type='int',
    help='the number of threads used when sampling the posterior')

parser.add_option('', '--min-distance', default=1, type='float',
    help='in Mpc. DEFAULT=1')
parser.add_option('', '--max-distance', default=1000, type='float',
    help='in Mpc. DEFAULT=1000')

parser.add_option('', '--min-tac', default=-1.0, type='float',
    help='in seconds. DEFAULT=-1.0')
parser.add_option('', '--max-tac', default=+1.0, type='float',
    help='in seconds. DEFAULT=+1.0')

# initial conditions
parser.add_option('', '--NpriorSteps', default=100, type='int', 
    help='the number of steps taken when sampling from the prior')

parser.add_option('', '--sample-ball', default=False, action='store_true',
    help='if supplied, we start the chains with a simple ball instead of sampling from the prior')

### parameters about the injected signal

parser.add_option('', '--m1', default=1.4, type='float',
    help='in Msun. DEFAULT=1.4')
parser.add_option('', '--m2', default=1.4, type='float',
    help="in Msun. DEFAULT=1.4")

parser.add_option('', '--s1z', default=0.0, type='float',
    help='DEFAULT=0')
parser.add_option('', '--s2z', default=0.0, type='float',
    help='DEFAULT=0')

parser.add_option('', '--phiRef', default=1.5*np.pi, type='float',
    help='in rad. DEFAULT=3*pi/2')

parser.add_option('', '--args-are-degrees', default=False, action='store_true',
    help='interpret angles specified as arguments in degrees instead of radians')

### signal processing params

parser.add_option('', '--f-min', default=10., type='float',
    help='in Hz. DEFAULT=10')
parser.add_option('', '--f-ref', default=40., type='float',
    help='in Hz. DEFAULT=40')

parser.add_option('', '--srate', default=4096., type='float',
    help='in Hz. DEFAULT=4096')
parser.add_option('', '--seglen', default=64., type='float',
    help='in sec. DEFAULT=64')

opts, args = parser.parse_args()

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

opts.verbose = opts.verbose or opts.Verbose or opts.time

if opts.resume and (not opts.setup):
    raise ValueError, 'cannot resume sampling without setup.pkl!'

if opts.line_of_sight:
    assert np.all([known_detectors.has_key(ifo) for ifo in opts.line_of_sight]), 'please supply only known ifos with --line-of-sight\n%s'%(', '.join(known_detectors.keys()))

#-------------------------------------------------

if opts.setup: ### load data from pickle file
    if opts.verbose:
        print( 'loading setup from : '+opts.setup )
    args, kwargs = utils.load_setup(opts.setup)
    pole = kwargs['pole'] ### we use this outside of kwargs

else:
    assert len(opts.instrument), 'please supply at least one instrument\n%s'%usage
    assert np.all([known_detectors.has_key(ifo) for ifo in opts.instrument]), 'please supply only known ifos\n%s'%(', '.join(known_detectors.keys()))

    assert len(args)==Ndim, 'please supply exactly %d input arguments\n%s'%(Ndim, usage)
    theta, phi, psi, iota, distance, tac = [float(_) for _ in args]
    if opts.args_are_degrees:
        deg2rad = np.pi/180
        theta *= deg2rad
        phi *= deg2rad
        psi *= deg2rad
        iota *= deg2rad

    #--------------------

    if opts.verbose:
        print( 'setting up arguments' )
    # technical parameters for vector length
    length = opts.srate*opts.seglen 

    deltaT = 1.0/opts.srate
    deltaF = 1.0 / (length * deltaT);

    #frequencies
    isco = LAL_C_SI**3/(LAL_G_SI*(opts.m1+opts.m2)*LAL_MSUN_SI) / (np.pi * 6**(3./2))*5 ### extra factor of 5 is from Matt's advice
    f_max = min(float(opts.srate)/2.0, isco) ### up to Nyquist or isco

    ## build the waveforms!
    h = lalsim.SimInspiralTaylorF2(
        opts.phiRef,
        deltaF,
        opts.m1*LAL_MSUN_SI, 
        opts.m2*LAL_MSUN_SI,
        opts.s1z, 
        opts.s2z,
        opts.f_min, 
        f_max, 
        opts.f_ref,
        LAL_PC_SI*1e6, ### normalize to 1 Mpc
        lal.CreateDict(),
    )
    freqs = np.array([h.f0+i*h.deltaF for i in np.arange(h.data.length)])
    h = h.data.data ### I only care about the frequency vector

    ### detectors
    detectors = [known_detectors[ifo] for ifo in opts.instrument]

    ### specify the line-of-sight frame in which we should sample
    if opts.line_of_sight:
        ifo1, ifo2 = opts.line_of_sight
        pole = known_detectors[ifo1].r - known_detectors[ifo2].r
        pole /= np.sum(pole**2)**0.5
        pole = np.arccos(pole[2]), np.arctan2(pole[1], pole[0]) ### store this in polar coordinates

    else:
        pole = None

    ### data
    hpf, hxf = utils.h2pol(utils.h2hAtT(freqs, h, tac), iota, distance=distance)
    if opts.zeroNoise: ### only add the signal
        data = [detector.project(freqs, hpf, hxf, theta, phi, psi, zeroFreq=False) for detector in detectors]

    else: ### add signal and Gaussian noise
        data = [detector.drawNoise(freqs)+detector.project(freqs, hpf, hxf, theta, phi, psi, zeroFreq=False) for detector in detectors]

    ### set up arguments
    args = (freqs, data, h, detectors)
    kwargs = {
        'zeroFreq':opts.zeroFreq,
        'minDistance':opts.min_distance,
        'maxDistance':opts.max_distance,
        'minT0':opts.min_tac,
        'maxT0':opts.max_tac,
        'pole':pole,
    }

    ### write to pkl file
    pklname = "%s/localize-setup%s.pkl"%(opts.output_dir, opts.tag)
    if opts.verbose:
        print( "    writing args, kwargs to : "+pklname )
    utils.dump_setup(pklname, args, kwargs)

### set up the starting point
if opts.resume: ### pick up where we left off
    if opts.verbose:
        print( 'loading initial point from : '+opts.resume )
    p0, opts.Nwalkers = utils.resume_ensemble(opts.resume)
    
elif opts.sample_ball:
    if opts.verbose:
        print( 'sampling from a ball around injected value to get starting point' )

    p0 = [theta, phi, psi, iota, distance, tac] ### injected location
    std = [0.1, 0.1, 0.1, 0.1, 0.01*(opts.max_distance-opts.min_distance), 0.01*(opts.max_tac-opts.min_tac)]
    if opts.line_of_sight:
        p0[:2] = utils.ThetaPhi2LineOfSight(theta, phi, pole=pole) ### start at LOS coords
        if np.all([ifo in opts.instrument for ifo in opts.line_of_sight]): ### we're sampling both detectors
            ### FIXME: may wnat to explicitly place walkers around the ring instead of relying on simple ball to do that...
            std = [0.01, np.pi, 0.1, 0.1, 0.01*(opts.max_distance-opts.min_distance), 0.01*(opts.max_tac-opts.min_tac)]

    p0 = emcee.utils.sample_ball(
        p0,
        std,
        size=opts.Nwalkers,
    )

else:
    if opts.verbose:
        print( 'sampling from prior to get starting points' )

    ### FIXME: 
    ###    insead of sampling the prior, we may want to sample the prior convolved with the detector network's sensitivity
    ###    basically, fold in a noise weighted measure of (F+^2 + Fx^2) somehow
    ###    this may be more trouble than it's worth
    sampler = emcee.EnsembleSampler(opts.Nwalkers, Ndim, utils.lnPrior, kwargs=kwargs)

    p0 = np.random.rand(opts.Nwalkers, Ndim)
    p0[:,0] *= np.pi
    p0[:,1] *= 2*np.pi
    p0[:,2] *= 2*np.pi
    p0[:,3] *= np.pi
    p0[:,4] = opts.min_distance + (opts.max_distance-opts.min_distance)*p0[:,4]
    p0[:,5] = opts.min_tac + (opts.max_tac-opts.min_tac)*p0[:,5]

    if opts.time:
        t0 = time.time()

    if opts.Verbose:
        template = '\r[%s%s] %.2f'
        sys.stdout.write(template%('', ' '*opts.status_width, 0))
        sys.stdout.flush()
        for i, (p0, _, _) in enumerate(sampler.sample(p0, iterations=opts.NpriorSteps)):
            f = (i+1.)/opts.NpriorSteps
            n = int((opts.status_width)*f)
            sys.stdout.write(template%('-'*n, ' '*(opts.status_width-n), f*100))
            sys.stdout.flush()
        sys.stdout.write("\n")

    else:
        p0, _, _ = sampler.run_mcmc(p0, opts.NpriorSteps)

    if opts.time:
        print( '    %.3f sec'%(time.time()-t0) )

#------------------------

if opts.verbose:
    print( 'setting up sampler' )
sampler = emcee.EnsembleSampler(
    opts.Nwalkers, 
    Ndim, 
    utils.lnPosterior, 
    args=args, 
    kwargs=kwargs, 
    threads=opts.threads,
)

### set up output file
if not opts.resume: ### report parameters at the top of the file
    filename = '%s/localize%s.txt'%(opts.output_dir, opts.tag)
    if opts.verbose:
        print( 'writing output to : %s'%filename )
    file_obj = open(filename, 'w') ### overwrite whatever was there before

    print >> file_obj, '# theta : %.5f'%theta
    print >> file_obj, '# phi : %.5f'%phi
    print >> file_obj, '# psi : %.5f'%psi
    print >> file_obj, '# iota : %.5f'%iota
    print >> file_obj, '# distanceMpc : %.5f'%distance
    print >> file_obj, '# timeAtCoalescence : %9.6f'%tac
    print >> file_obj, '# Nwalkers : %d'%opts.Nwalkers
    print >> file_obj, '# lineOfSight : %s'%(' '.join(opts.line_of_sight) if opts.line_of_sight else None)
    print >> file_obj, 'k lnprob       theta        phi         psi         iota    distanceMpc timeAtCoalescence'

else:
    if opts.verbose:
        print( 'writing output to : %s'%opts.resume )
    file_obj = open(opts.resume, 'a') ### append onto existing file

report = '%d %4.9f %1.9f %1.9f %1.9f %1.9f %6.9f %9.6f' ### used to report state

if opts.verbose:
    print( 'running sampler' )
    if opts.time:
        t0 = time.time()

if opts.Verbose: ### print a progress bar while sampling
    template = '\r[%s%s] %.2f'
    sys.stdout.write(template%('', ' '*opts.status_width, 0))
    sys.stdout.flush()
    for i, (pos, lnpost, _) in enumerate(sampler.sample(p0, iterations=opts.Nsteps)):
        ### report state
        for walker in xrange(opts.Nwalkers):
            print >> file_obj, report%tuple([walker, lnpost[walker]]+list(utils.lineOfSight2ThetaPhi(*pos[walker,:2], pole=pole)) + list(pos[walker,2:]))
        file_obj.flush() ### only flush output if we're Verbose

        ### print progress
        f = (i+1.)/opts.Nsteps
        n = int((opts.status_width)*f)
        sys.stdout.write(template%('-'*n, ' '*(opts.status_width-n), f*100))
        sys.stdout.flush()
    sys.stdout.write("\n")

else: ### just sample silently
    for pos, lnpost, _ in sampler.sample(p0, iterations=opts.Nsteps):
        ### report state
        for walker in xrange(opts.Nwalkers):
            params = pos[walker]
            print >> file_obj, report%tuple([walker, lnpost[walker]]+list(*utils.lineOfSight2ThetaPhi(*pos[walker,:2], pole=pole)) + list(pos[walker,2:]))
        ### do not flush output here because we are not Verbose

if opts.time:
    print( '    %.3f sec'%(time.time()-t0) )

### report how the sampler performed
message = 'acceptance_fraction : %s'%(' '.join('%.5f'%_ for _ in sampler.acceptance_fraction))
if opts.verbose:
    print( message )
print >> file_obj, '# '+message

try:
    message = 'autocorrelation length : %s'%(' '.join('%.5f'%_ for _ in sampler.acor))
except emcee.autocorr.AutocorrError: # chain is too short
    message = 'chain is too short for autocorrelation analysis'
if opts.verbose:
    print( message )
print >> file_obj, '# '+message

file_obj.close()

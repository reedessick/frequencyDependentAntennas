#!/usr/bin/env python

usage = "bode_antennas [--options]"
description = "make some plots of the antenna patterns for a single IFO"
author = "Reed Essick"

#-------------------------------------------------

import os

import freqDepAntennas as ant

import numpy as np
import healpy as hp

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt
plt.rcParams.update({
    'text.usetex':True,
    'font.family': 'serif',
#    'font.serif': ['Computer Modern'],
#    "axes.grid": True,
#    "axes.axisbelow": False,
#    "axes.formatter.limits": (-3, 4),
    "axes.labelsize": 20,
    "axes.titlesize": 22,
    "figure.subplot.bottom": 0.10,
    "figure.subplot.left": 0.13,
    "figure.subplot.right": 0.98,
    "figure.subplot.top": 0.92,
    "grid.color": 'gray',
#    "image.aspect": 'auto',
#    "image.interpolation": 'nearest',
#    "image.origin": 'lower',
    "xtick.labelsize": 15,
    "ytick.labelsize": 15,
})

from lalinference import plot as lalinf_plot

from optparse import OptionParser

#-------------------------------------------------

rad2deg = 180/np.pi

def phs( x ):
    return np.arctan2(x.imag, x.real)

#-------------------------------------------------

parser = OptionParser(usage=usage, description=description)

parser.add_option('-v', '--verbose', default=False, action='store_true')
parser.add_option('-V', '--Verbose', default=False, action='store_true')

parser.add_option('', '--theta-phi', nargs=2, default=[], type='float', action='append',
    help="the source locations for which we generate bode plots. Should be specified in degrees!")

parser.add_option('', '--ex', default=[], nargs=3, type='float')
parser.add_option('', '--ey', default=[], nargs=3, type='float')

parser.add_option('', '--Nfreq', default=10, type='int',
    help='the number of frequency samples to use when generating plots')
parser.add_option('', '--fmin', default=1e-3, type='float')
parser.add_option('', '--fmax', default=2, type='float')

parser.add_option('', '--min-mag', default=3e-3, type='float')

parser.add_option('', '--norm2zeroFreq', default=False, action='store_true',
    help='normalize antenna patterns to their zero-frequency limit')

parser.add_option('', '--series-legend', default=False, action='store_true', 
    help='add a legend to the magnitude panels of the series figures')

parser.add_option('', '--annotation', nargs=3, default=[], type='string', action='append',
    help='the frequency and text for an annotation (eg: "1000 1kHz red")')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()

if opts.tag:
    opts.tag = "_"+opts.tag

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

opts.verbose = opts.verbose or opts.Verbose

while len(opts.ex)!=3:
    opts.ex = [float(_) for _ in raw_input('--ex=').strip().split()]
opts.ex = np.array(opts.ex)

while len(opts.ey)!=3:
    opts.ey = [float(_) for _ in raw_input('--ey=').strip().split()]
opts.ey = np.array(opts.ey)

opts.annotation = [(float(f), s, color) for f, s, color in opts.annotation]

#-------------------------------------------------

### "T" sets some scale for the frequencies but is otherwise uninteresting
### without loss of generality, we set it to 1
T = 1.0 

#------------------------

### now, we only work with the coordIndep formulation
if opts.verbose:
    print "plotting as a function of frequency"
freqs = np.logspace(np.log10(opts.fmin/2), np.log10(opts.fmax/2), opts.Nfreq) ### the frequencies at which we evaluate antenna patterns

### set up progression plots for F+, Fx separately

series_Fp_fig = plt.figure()
series_Fpmag_ax = plt.subplot(2,1,1)
series_Fpphs_ax = plt.subplot(2,1,2)

plt.subplots_adjust(hspace=0.05)

series_Fx_fig = plt.figure()
series_Fxmag_ax = plt.subplot(2,1,1,)
series_Fxphs_ax = plt.subplot(2,1,2)

plt.subplots_adjust(hspace=0.05)


### iterate through supplied angles
for ind, (theta, phi) in enumerate(opts.theta_phi):
    if opts.Verbose:
        print "    theta : %.3f deg"%theta
        print "    phi   : %.3f deg"%phi

    title = "$\\theta=%.1f^\circ$  $\phi=%.1f^\circ$"%(theta, phi)

    Fp, Fx = ant.antenna_response([theta/rad2deg], [phi/rad2deg], [0.0], opts.ex, opts.ey, T=T, freqs=freqs)
    Fp = Fp.flatten()
    Fx = Fx.flatten()

    FpFx = (np.abs(Fp)**2+np.abs(Fx)**2)**0.5

    if opts.norm2zeroFreq:
        fp, fx = ant.const_antenna_response([theta/rad2deg], [phi/rad2deg], [0.0], opts.ex, opts.ey)
        if fp!=0:
            Fp /= fp
        if fx!=0:
            Fx /= fx
        norm = (fp**2 + fx**2)**0.5
        if norm!=0:
            FpFx /= norm

    #--- total magnitude
    fig = plt.figure()
    mag_ax = plt.subplot(2,1,1)
    phs_ax = plt.subplot(2,1,2)

    mag_ax.plot( 2*freqs, FpFx, color='g', label='$|F_+|^2+|F_\\times|^2$')
    mag_ax.plot( 2*freqs, np.abs(Fp), color='b', linestyle='dashed', label='$|F_+|^2$' )
    mag_ax.plot( 2*freqs, np.abs(Fx), color='r', linestyle='dashed', label='$|F_\\times|^2$' )

    plt.setp(mag_ax.get_xticklabels(), visible=False)
    mag_ax.set_title(title)

    phs_ax.plot( 2*freqs, phs(Fp)*rad2deg, color='b', label='$F_+$' )
    phs_ax.plot( 2*freqs, phs(Fx)*rad2deg, color='r', label='$F_\\times$' )

    phs_ax.set_xlabel('$f/f_\mathrm{fsr}$')

    if opts.norm2zeroFreq:
        mag_ax.set_ylabel('normalized magnitude')
        phs_ax.set_ylabel('normalized phase [$^\circ$]')

    else:
        mag_ax.set_ylabel('magnitude')
        phs_ax.set_ylabel('phase [$^\circ$]')

    mag_ax.legend(loc='best')

    mag_ax.set_yscale('log')
    mag_ax.set_ylim(ymin=opts.min_mag, ymax=1.1)
    mag_ax.set_xscale('log')
    mag_ax.set_xlim(xmin=opts.fmin, xmax=opts.fmax)

    ymin, ymax = phs_ax.get_ylim()
    phs_ax.set_ylim(ymin=max(-181, ymin), ymax=min(181, ymax))
    phs_ax.set_xscale('log')
    phs_ax.set_xlim(mag_ax.get_xlim())

    mag_ax.grid(True, which='both')
    phs_ax.grid(True, which='both')

    plt.subplots_adjust(hspace=0.05)

    for f, s, color in opts.annotation:
        for ax in [mag_ax, phs_ax]:
            ylim = ax.get_ylim()
            ax.plot([f]*2, ylim, 'k-', alpha=0.5, color=color)
        ax.text(0.95*f, ylim[0]*0.9+ylim[1]*0.1, s, ha='right', va='bottom', fontsize=14, color=color)

    figname = "%s/bode_%04d%s.png"%(opts.output_dir, ind, opts.tag)
    if opts.verbose:
        print "    "+figname
    fig.savefig(figname)
    plt.close(fig)

    ### add to seires plots
    series_Fpmag_ax.plot( 2*freqs, np.abs(Fp), label=title )
    series_Fpphs_ax.plot( 2*freqs, phs(Fp)*rad2deg, label=title )

    series_Fxmag_ax.plot( 2*freqs, np.abs(Fx), label=title )
    series_Fxphs_ax.plot( 2*freqs, phs(Fx)*rad2deg, label=title )

### decorate and save series figures
for mag_ax, phs_ax, fig, tag, title in [
        (series_Fpmag_ax, series_Fpphs_ax, series_Fp_fig, 'F+', '$F_+$'), 
        (series_Fxmag_ax, series_Fxphs_ax, series_Fx_fig, 'Fx', '$F_\\times$'),
    ]:

    plt.setp(mag_ax.get_xticklabels(), visible=False)
    mag_ax.set_title(title)

    phs_ax.set_xlabel('$f/f_\mathrm{fsr}$')

    if opts.norm2zeroFreq:
        mag_ax.set_ylabel('normalized magnitude')
        phs_ax.set_ylabel('normalized phase [$^\circ$]')

    else:
        mag_ax.set_ylabel('magnitude')
        phs_ax.set_ylabel('phase [$^\circ$]')

    if opts.series_legend:
        mag_ax.legend(loc='best')

    try:
        mag_ax.set_yscale('log')
    except ValueError as e: ### no positive values
        pass
    mag_ax.set_ylim(ymin=opts.min_mag, ymax=1.1)
    mag_ax.set_xscale('log')
    mag_ax.set_xlim(xmin=opts.fmin, xmax=opts.fmax)

    ymin, ymax = phs_ax.get_ylim()
    phs_ax.set_ylim(ymin=max(-181, ymin), ymax=min(181, ymax))
    phs_ax.set_xscale('log')
    phs_ax.set_xlim(mag_ax.get_xlim())

    mag_ax.grid(True, which='both')
    phs_ax.grid(True, which='both')

    for f, s, color in opts.annotation:
        for ax in [mag_ax, phs_ax]:
            ylim = ax.get_ylim()
            ax.plot([f]*2, ylim, 'k-', alpha=0.5, color=color)
        ax.text(0.95*f, ylim[0]*0.9+ylim[1]*0.1, s, ha='right', va='bottom', fontsize=14, color=color)

    figname = "%s/bode-%s%s.png"%(opts.output_dir, tag, opts.tag)
    if opts.verbose:
        print "    "+figname
    fig.savefig(figname)
    plt.close(fig)

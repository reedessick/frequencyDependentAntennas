#!/usr/bin/env python

usage = "plot_ensemble [--options] ensemble.txt"
description = "generate representations of the ensemble of points produced by localize"
author = "Reed Essick"

#-------------------------------------------------

import os

import numpy as np

import emcee ### for autocorrelation analysis

import simUtils as utils

import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot as plt
plt.rcParams['text.usetex'] = True

import corner

from optparse import OptionParser

#-------------------------------------------------

axpos = [0.03, 0.03, 0.94, 0.94]
figsize = (9, 5)

deg2rad = np.pi/180
rad2deg = 1./deg2rad

#-------------------------------------------------

parser = OptionParser(usage=usage, description=description)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

### reference parameters

parser.add_option('', '--theta', default=None, type='float',
    help='the injected parameter. Will be annotated on plots')
parser.add_option('', '--phi', default=None, type='float',
    help='the injected parameter. Will be annotated on plots')
parser.add_option('', '--psi', default=None, type='float',
    help='the injected parameter. Will be annotated on plots')
parser.add_option('', '--iota', default=None, type='float',
    help='the injected parameter. Will be annotated on plots')
parser.add_option('', '--distanceMpc', default=None, type='float',
    help='the injected parameter. Will be annotated on plots')
parser.add_option('', '--timeAtCoalescence', default=None, type='float',
    help='the injected parameter. Will be annotated on plots')

parser.add_option('', '--angles-are-deg', default=False, action='store_true')

### plotting options
parser.add_option('', '--color', default='k', type='string',
    help='color used for annotation in skymap scatter and truth annotations in corner')
parser.add_option('', '--alpha', default=1.0, type='float',
    help='alpha used for annotation in skymap scatter')

parser.add_option('', '--scatter-color', default='r', type='string',
    help='color used for markers in skymap scatter')
parser.add_option('', '--scatter-alpha', default=0.1, type='float',
    help='alpha used for markers in skymap scatter')

opts, args = parser.parse_args()

assert len(args)==1, 'please supply exactly 1 input argument\n%s'%usage

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

if opts.angles_are_deg:
    if opts.theta!=None: 
        opts.theta *= deg2rad
    if opts.phi!=None: 
        opts.phi *= deg2rad
    if opts.psi!=None: 
        opts.psi *= deg2rad
    if opts.iota!=None: 
        opts.iota *= deg2rad

if opts.phi > np.pi:
    opts.phi -= 2*np.pi

#-------------------------------------------------

if opts.verbose:
    print( 'reading ensemble of samples from : '+args[0] )
samples = utils.load_ensemble( args[0] )

# columns are :
#   k (walker number)
#   lnprob
#   theta
#   phi
#   psi
#   iota
#   distanceMpc
#   timeAtCoalescence

#-------------------------------------------------

### plot skymap first
if opts.verbose:
    print( '(scatter) plot skymap on mollweide projection' )

fig = plt.figure(figsize=figsize)
ax = fig.add_axes(axpos, projection='mollweide')

### FIXME: may want to color points by their lnprob?
ax.plot( 
    samples['phi'], 
    0.5*np.pi - samples['theta'], ### plot declination, not theta
    linestyle='none', 
    marker='o', 
    markersize=2, 
    alpha=opts.scatter_alpha, 
    markeredgecolor=opts.scatter_color, 
    markerfacecolor=opts.scatter_color,
)

### decorate
ax.grid(True, which='both')
if (opts.phi!=None) and (opts.theta!=None):
    ax.plot(opts.phi, 0.5*np.pi - opts.theta, marker='x', markersize=10, color=opts.color, alpha=opts.alpha )

figname = "%s/ensemble-skymap%s.png"%(opts.output_dir, opts.tag)
if opts.verbose:
    print( '    saving : '+figname )
fig.savefig(figname)
plt.close(figname)

#------------------------

### corner plot of all extrinsic parameters
if opts.verbose:
    print( 'corner plot' )

# set up data and labels
data = np.array([
    samples['theta']*rad2deg,
    samples['phi']*rad2deg,
    samples['psi']*rad2deg,
    samples['iota']*rad2deg,
    samples['distanceMpc'],
    samples['timeAtCoalescence'],
]).transpose()

labels = [
    r"$\theta$ [$^\circ$]", 
    r"$\phi$ [$^\circ$]", 
    r"$\psi$ [$^\circ$]", 
    r"$\iota$ [$^\circ$]", 
    '$D$ [Mpc]', 
    '$t_0$ [sec]',
]

truths = [
    opts.theta*rad2deg if opts.theta!=None else None,
    opts.phi*rad2deg if opts.phi!=None else None,
    opts.psi*rad2deg if opts.psi!=None else None,
    opts.iota*rad2deg if opts.iota!=None else None,
    opts.distanceMpc,
    opts.timeAtCoalescence,
]

# delegate to generate figure
fig = corner.corner(
    data, 
    labels=labels,
    truths=truths,
    truth_color=opts.color,
    quantiles=[0.10, 0.50, 0.90],
    show_titles=True, 
    title_kwargs={"fontsize": 12},
)

figname = "%s/ensemble-corner%s.png"%(opts.output_dir, opts.tag)
if opts.verbose:
    print( '    saving : '+figname )
fig.savefig(figname)
plt.close(fig)

#------------------------

### autocorrelation analysis
if opts.verbose:
    print( 'autocorrelation analysis' )
raise NotImplementedError, '''\
autocorrelation analysis
    - emcee.autocorr.integrated_time
    - emcee.autocorr.function'''
